<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Ivan Osipov</title>
    <link>https://i-osipov.ru/tags/kotlin/index.xml</link>
    <description>Recent content in Kotlin on Ivan Osipov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <atom:link href="https://i-osipov.ru/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kotlin Generics</title>
      <link>https://i-osipov.ru/post/kotlin-generics/</link>
      <pubDate>Sun, 04 Feb 2018 06:17:17 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/kotlin-generics/</guid>
      <description>

&lt;p&gt;Первый релиз языка Kotlin включает в себя Kotlin Generics. Обобщенные типы, благодаря которым
мы с вами можем писать более гибкие приложения с меньшим дублированием кода и большей типобезопасностью.
Одно из важных преимуществ, которое дает вашему приложению использование Generics - проверка типов на этапе компиляции.
Дизайнеры языка Kotlin ввели новые ключевые слова для работы с дженериками, что по началу может ввести в ступор даже
опытного Java разработчика. Сегодня мы с вами обсудим что такое &amp;ldquo;дженерики&amp;rdquo;, удалим страх перед словами типа &amp;ldquo;контравариантность&amp;rdquo;,
а заодно познакомимся с reified generics и star-projection.&lt;/p&gt;

&lt;h2 id=&#34;generics&#34;&gt;Generics&lt;/h2&gt;

&lt;p&gt;Для тех кто вовсе не знаком с обобщенными типами (generics) и для тех, кто порядком подзабыл, я напомню,
что обобщенные типы это возможность выполнять контроль типов в вашем приложении при том, что точный тип вам не известен.
Приведу пример, у вас есть коллекция Set, которая может быть хранилищем для абсолютно разных объектов, так, в одном
месте приложения вы возпользуетесь &lt;code&gt;Set&amp;lt;User&amp;gt;&lt;/code&gt; для работы с множеством пользователей, а в другой части приложения это
будет &lt;code&gt;Set&amp;lt;Task&amp;gt;&lt;/code&gt; - коллекция, которая хранит выполненные задачи. В обоих случаях коллекция Set выполняет возложенные
на неё обязательства, более того, компилятор может проверить, что метод add принимает объект соответствующего типа, ровно
как мы получим объекты этого типа проходя по коллекции.&lt;/p&gt;

&lt;p&gt;Создание классов с обобщенными Kotlin типами в простейшем виде выглядит следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;T&amp;gt;(var contained: T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;T - это лишь типичный пример именования неизвестного типа, вместо T вы можете использовать любой идентификатор для
удобства. В примере выше мы описали класс, единственный параметр класса имеет общенный тип. Обратите внимание, что свойство
класса имеет модификатор &lt;code&gt;var&lt;/code&gt; и здесь это не с проста, ниже я объясню почему. Воспользуемся контейнером
следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val container = Container(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Обратите внимание, в сравнении с Java нам нет необходимости явно указывать Generic тип для контейнера, т.к. компилятор
обладает полной информацией для выведения этого типа. Аналогично, начиная с Java 7, мы имеем возможность писать сокращенный
вариант с использованием &lt;a href=&#34;http://www.rootfront.com/article/219061/2011-04-21/v-jdk-7-pojavitsja-diamond-operator&#34; target=&#34;_blank&#34;&gt;Diamond Operator&lt;/a&gt;.
В совокупности с возможностью Kotlin выводить типы и для переменных мы имеем сокращенный синтаксис и при этом гибкий набор инструментов.&lt;/p&gt;

&lt;p&gt;Но что, если мы хотим положить в наш контейнер другой Int? Легко!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;container.contained = 42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем, мы можем прочитать его, также легко.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;println(container.contained)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На каждом этапе, на каждой строке компилятор проверяет, что мы работаем именно с Int, а не с чем бы то ни было другим, благодаря
этому, мы, например, не можем записать в наш контейнер String.&lt;/p&gt;

&lt;h2 id=&#34;инвариантный-ковариантный-контравариантный&#34;&gt;Инвариантный, ковариантный, контравариантный&lt;/h2&gt;

&lt;p&gt;Должен вам признаться, если не работать со сложными вариациями обобщенных типов, то со временем всё забывается и приходится
обновлять знания, вспоминать некоторые термины и иногда это дается с трудом, т.к. множество источников по generics пестрят
красивыми словами &lt;em&gt;инвариантный&lt;/em&gt;, &lt;em&gt;ковариантный&lt;/em&gt;, &lt;em&gt;контравариантный&lt;/em&gt;, однако, эти же источники совершенно невнятно объясняют
терминологию. Сегодня я нацелен исправить это и перешагнуть через тонкую грань непонимания в данном вопросе.&lt;/p&gt;

&lt;h3 id=&#34;инвариантность&#34;&gt;Инвариантность&lt;/h3&gt;

&lt;p&gt;Возвращаясь к примеру с контейнером из предыдущего раздела, мы имеем тип &lt;code&gt;Container&amp;lt;T&amp;gt;&lt;/code&gt;, где вместо T может оказаться
любой тип с верхней границей Any? (об этом позже, коротко, любой nullable и не-nullable тип). Допустим, что мы
сохранили в контейнер значение с типом Int следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val container: Container&amp;lt;Int&amp;gt; = Container&amp;lt;Int&amp;gt;(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Я определяю тип переменной и дженерик для очевидности, по умолчанию, компилятор вполне справляется с их выводом&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Сможем ли мы обобщить нашу переменную чуть больше. Int наследуется от Number, и допустим мы хотим хранить в переменной
контейнер не только с Int, а в принципе с Number, т.е. в нем может находиться любое число, например, Double.
Интуитивно хочется написать:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val container: Container&amp;lt;Number&amp;gt; = Container&amp;lt;Int&amp;gt;(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Однако, такой код не скомпилируется, т.к. не смотря на то, что Int наследуется от Number, то типы с дженериками
&lt;code&gt;Container&amp;lt;Number&amp;gt;&lt;/code&gt; и &lt;code&gt;Container&amp;lt;Int&amp;gt;&lt;/code&gt; не находятся в одной иерархии, по сути, это абсолютно разные типы, никак не
совместимые. Другим языком, &lt;strong&gt;класс Container неизменен (инвариантен) по типу T&lt;/strong&gt;. Следовательно, независимо от иерархии
наследования самих обобщенных типов, по умолчанию, мы не можем говорить об каком-либо следствии иерархии классов
использующих их.&lt;/p&gt;

&lt;h3 id=&#34;ковариантность&#34;&gt;Ковариантность&lt;/h3&gt;

&lt;p&gt;Вы можете задаться вопросом: &amp;ldquo;А зачем это сделано? Почему не дать иерархию как следствие иерархии обобщенных типов по
умолчанию?&amp;ldquo;. Дело в том, что основная задача обобщенных типов - обеспечить безопасность типизации в вашем коде,
уменьшить количество выбрасываемых исключений во времени выполнения уже на этапе компиляции, ну и конечно сделать всё
это гибко. Обрисовать проблему мне помогут массивы из Java. Так получилось, что в Java массивы появились на много
раньше чем обобщенные типы. Когда вводили массивы дали возможность сказать, что если у вас есть массив целочисленных значений (Integer[]), то вы можете
присвоить это значение в переменную Number[]. Казалось бы, вот мы и получили наследование, но давайте рассмотрим
следующий кусочек кода:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Integer[] a = { 4, 5 }; //создаем массив Integer 
Number[] b = a; // делаем еще одну ссылку на массив с типом Number[] и это допустимо
b[1] = 4.4; //сохраняем Double значение в массив Integer
//Exception in thread &amp;quot;main&amp;quot; java.lang.ArrayStoreException: java.lang.Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Вот так просто мы можем получить ошибку, которую увидим только на этапе выполнения (в JVM есть специальная проверка, которая
выполняется на записи), следовательно, наследование
как следствие по умолчанию - это плохая идея. Однако, следующий код допустим, не так ли?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Integer[] a = { 4, 5 };
Number[] b = a;
System.out.println(b[1]);
//output: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь всё законно, мы сделали те же самые действия, но вместо присвоения значения, мы его прочитали. Получается, что иногда
поведение передачи наследования в соответствии с обобщенным типом может быть безопасно. Например, у нас есть метод, который
будет только распечатывать значения из входного параметра и, в принципе, он может принимать любые числа, хоть
Integer и Double в одном массиве, а затем печатать их. Так мы можем вывести правило:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;если наша пременная только предоставляет значения, то мы можем допустить, что в ней может находиться значение ниже
по иерархии обобщенного типа&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;аналогично для классов с обобщенными типами:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;если объект нашего класса только предоставляет значения, то мы можем допустить, что в нём хранится значение ниже
по иерархии обобщенного типа&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Что значит &amp;ldquo;ниже по иерархии&amp;rdquo;? В Kotlin, как и в любом другом типизированном языке, существует иерархия типов. Если вы
слабо представляете её, то я могу порекомендовать вам вот &lt;a href=&#34;http://natpryce.com/articles/000818.html&#34; target=&#34;_blank&#34;&gt;эту&lt;/a&gt;
статью, которая поможет разобраться в системе типов. Ну а сейчас, для краткости, я лишь скажу, что для типа Number типы Int и Double
лежат ниже по иерархии типов (могут быть безопасно приведены к Number), а тип Any лежит выше по иерархии типов (к нему можно
безопасно привести Number).&lt;/p&gt;

&lt;p&gt;Другими словами, нужно как-то объяснить компилятору, что в некоторых ситуациях мы готовы к ковариантности. Тут то мы и подобрались
к этому страшному слову. &lt;strong&gt;Ковариантностью&lt;/strong&gt; называется сохранение иерархии типов в производных типах в том же порядке.&lt;/p&gt;

&lt;p&gt;Мы можем сказать, что &lt;code&gt;Container&amp;lt;T&amp;gt;&lt;/code&gt; ковариантен своему параметру-типу T. Это будет означать, что если Int - потомок
Number, то &lt;code&gt;Container&amp;lt;Int&amp;gt;&lt;/code&gt; будет тоже считаться потомком &lt;code&gt;Container&amp;lt;Number&amp;gt;&lt;/code&gt;. Напомню, что выше мы убедились
в том, что ковариантность допустима, только когда мы говорим о получении значения, а по умолчанию обобщенные типы инвариантны,
т.е. мы можем безопасно &lt;strong&gt;получить&lt;/strong&gt; Number, если работаем с &lt;code&gt;Container&amp;lt;Int&amp;gt;&lt;/code&gt; или контейнером для любого другого наследника Number.
Существует два способа объяснить компилятору то, что Container ковариантен по параметру-типу T в Kotlin. Давайте их рассмотрим.&lt;/p&gt;

&lt;h4 id=&#34;ковариантность-на-уровне-класса-на-месте-объявления&#34;&gt;Ковариантность на уровне класса (на месте объявления)&lt;/h4&gt;

&lt;p&gt;Когда мы объявляем класс, мы можем изначально говорить о том, что класс ковариантен своему типу-параметру. Работать с ковариантными
типами нам помогает ключевое слово &lt;code&gt;out&lt;/code&gt;. Семантика его крайне проста в понимании. Если класс выступает в качестве Producer&amp;rsquo;a,
т.е. мы планируем значения типа Т &lt;strong&gt;только&lt;/strong&gt; получать, то мы используем ключевое слово &lt;code&gt;out&lt;/code&gt;, т.е. класс поставляет
значения типа &lt;strong&gt;наружу&lt;/strong&gt;. Давайте изменим декларацию нашего класса Container следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;out T&amp;gt;(var contained: T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тут же мы получаем ошибку компиляции, но какую?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type parameter T is declared as &#39;out&#39; but occurs in &#39;invariant&#39; position in type T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Какая странная ошибка, где это у нас возникает потребность в инвариантном состоянии? Точно! Ключевое слово &lt;code&gt;var&lt;/code&gt;!
Мы совсем забыли о том, что &lt;code&gt;var&lt;/code&gt; отличается от &lt;code&gt;val&lt;/code&gt; наличием возможности изменить это значение, а как мы помним,
ковариантность возможна только в случае, если вы запретите любые изменения значения. Заменим var на val&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;out T&amp;gt;(val contained: T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Вот и всё. Теперь наш класс Container ковариантен параметру-типу T, это означает, что мы легко можем использовать следующую
конструкцию:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val container: Container&amp;lt;Number&amp;gt; = Container&amp;lt;Int&amp;gt;(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Инвариантность как рукой сняло! Но чем мы за это заплатили?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val container: Container&amp;lt;Int&amp;gt; = Container&amp;lt;Int&amp;gt;(25)
val container2: Container&amp;lt;Number&amp;gt; = container
container2.contained = 4.0 //не компилируется, т.к. нельзя менять значение, зато мы
// защищены от ошибок как с Java массивами
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как вы видите теперь тип &lt;code&gt;Container&amp;lt;Int&amp;gt;&lt;/code&gt; наследник типа &lt;code&gt;Container&amp;lt;Number&amp;gt;&lt;/code&gt;, благодаря чему мы можем свободно присваивать его переменным
типа &lt;code&gt;Container&amp;lt;Number&amp;gt;&lt;/code&gt;, но не можем менять значения типа T и это правильно. Представьте, если бы последняя строчка
компилировась. Это значит, что через свойство contained было бы записано Double значение! Получается, что переменная
container с типом &lt;code&gt;Container&amp;lt;Int&amp;gt;&lt;/code&gt; содержала бы не Int, а Double, ведь и container, и container2 это две ссылки на один и
тот же объект в памяти. И при попытке получения container.contained мы бы словили &lt;code&gt;ClassCastException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ковариантность на уровне класса - дело хорошее, оно гребёт под себя весь класс и заставляет нас не менять значения, но, что
если нам не нужна ковариантность для всего класса? Пора разобраться с ковариантностью на месте использования.&lt;/p&gt;

&lt;h4 id=&#34;ковариантность-на-месте-использования&#34;&gt;Ковариантность на месте использования&lt;/h4&gt;

&lt;p&gt;Один из мощных механизмов управления иерархиями обобщенных типов это ковариантность на уровне объявления. Вспомним нашу
первую версию инвариантного контейнера:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;T&amp;gt;(var contained: T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если наш класс не ковариантен какому-либо параметру T, то мы можем свободно менять его значения как хотим:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val sourceContainer: Container&amp;lt;Int&amp;gt; = Container&amp;lt;Int&amp;gt;(25)
sourceContainer.contained = 4 // компилируется
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;А в тот момент, когда нам понадобится завести общую переменную под контейнеры с разными параметрами-типами, мы сможем это сделать, воспользовавшись
ковариантностью на месте использования (проекцией типа).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val covariantContainer: Container&amp;lt;out Number&amp;gt; = sourceContainer
covariantContainer.contained = 4 
/*  не компилируется, работаем с переменной у которой тип ковариантен параметру-типу
    значит нельзя менять значения, т.к. мы не знаем исходный тип, 
    там может быть любой контейнер с параметром-типом наследником Number
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Благодаря, ковариантности на уровне объявления мы можем делать многие вещи очень гибко, например, написать следующий код:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;T: Any&amp;gt; { //что такое T: Any вы узнаете чуть позже
    /* 
        Пусть на момент создания контейнера мы еще не знаем,
        что конкретно он будет содержать, но знаем точно, что 
        что-то с некоторым типом T он должен, следовательно после 
        создания, рано или поздно, мы поменяем значение поля contained,
        а значит оно по определению не может быть val. В такой ситуации,
        мы не можем объявлять ковариантность на уровне класса
     */
    lateinit var contained: T

    override fun toString(): String {
        return &amp;quot;Container(contained=$contained)&amp;quot;
    }

}

/*
    Возвращаемый тип Container&amp;lt;out Number&amp;gt; создает ковариантность
    на месте использования, следовательно, из метода мы возвращаем 
    контейнер, который типизирован чем-то ниже в иерархии наследования
 */
fun createIntContainer(): Container&amp;lt;out Number&amp;gt; {
    val container = Container&amp;lt;Int&amp;gt;()
    container.contained = 42
    return container
}

fun createDoubleContainer(): Container&amp;lt;out Number&amp;gt; {
    val container = Container&amp;lt;Double&amp;gt;()
    container.contained = 42.0
    return container
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    var covariantContainer = createIntContainer() //Container&amp;lt;out Number&amp;gt;
    println(covariantContainer)
    covariantContainer = createDoubleContainer() //Container&amp;lt;out Number&amp;gt;
    println(covariantContainer)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Вывод в консоли:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Container(contained=42)
Container(contained=42.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Таким образом, мы успешно хранили в одной переменной контейнеры с разным параметром-типом, при том, что сам контейнер
инвариантен по своему параметру-типу Т.&lt;/p&gt;

&lt;p&gt;С ковариантностью разобрались, осталась контравариантность.&lt;/p&gt;

&lt;h3 id=&#34;контравариантность&#34;&gt;Контравариантность&lt;/h3&gt;

&lt;p&gt;Кроме того, чтобы описывать классы как producer&amp;rsquo;ы, иногда, нам может понадобиться
описать классы как consumer&amp;rsquo;ы или &lt;strong&gt;потребители&lt;/strong&gt;. Давайте рассмотрим следующую иерархию типов:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Пользователь
   /           \
Работник  Администратор   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пусть перед нами стоит задача написать логгер тех, кто входит в систему. Каждый пользователь системы имеет логин и именно его
мы будем распечатывать.&lt;/p&gt;

&lt;p&gt;Объявление такой иерархии типов может выглядеть, например, так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;open class User(var login: String)

class Worker(login: String): User(login)

class Admin(login: String): User(login)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Создадим класс Printer, который инкапсулирует в себе логику печати:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Printer&amp;lt;T: User&amp;gt; {
    fun print(user: T) {
        println(&amp;quot;User ${user.login} is logged in&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пока класс инвариантен и в большинстве случаев этого будет достаточно благодаря автоматическому приведению типов. Подумайте,
если бы мы передали в метод print объект типа Admin, то он спокойно был бы принят компилятором и приведен к верней границе
обобщенного типа User, но все приложения разные. Допустим, у нас есть метод &lt;code&gt;printAdmin&lt;/code&gt;, который знает какие предобработки нужно
сделать, а затем вызывает правильный метод у объекта класса &lt;code&gt;Printer&lt;/code&gt;. Напишем метод &lt;code&gt;printAdmin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun printAdmin(printer: Printer&amp;lt;Admin&amp;gt;, admin: Admin) {
    //admin specific
    printer.print(admin)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Такой метод в своём использовании сужает вариативность нашего принтера, теперь принтер должен уметь печатать именно администратора.
Принтер для работника здесь не подойдет, а подойдет ли принтер для пользователя в принципе? Почему бы и нет, админ - тоже пользователь,
значит мы должны уметь печатать его тем же принтером, что и других пользователей. Получается, если Админ наследуется от Пользователя, то
принтер пользователя, должен быть наследником принтера админа (только в этом случае мы сможем безопасно привести тип
&lt;code&gt;Printer&amp;lt;User&amp;gt;&lt;/code&gt; к типу &lt;code&gt;Printer&amp;lt;Admin&amp;gt;&lt;/code&gt;). За сим мы наблюдаем разворот иерархии в другую сторону - это и обозначают сложным
словом контравариантность. Схематично контравариантность можно обозначить следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   User         Printer&amp;lt;Admin&amp;gt;       
    ↑     →         ↑
  Admin         Printer&amp;lt;User&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как вы, уверен, уже запомнили, обобщенные типы сами по себе инвариантны, по этому следующий код не скомпилируется:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val admin = Admin(&amp;quot;admin&amp;quot;)
printAdmin(Printer&amp;lt;User&amp;gt;(), admin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Однако, мы можем это изменить. Для этого в нашем арсенале есть ключевое слово &lt;code&gt;in&lt;/code&gt;. Применять мы можем его как на уровне объявления,
так и на уровне использования, аналогично ковариантной аннотации обобщенного типа &lt;code&gt;out&lt;/code&gt;. Выглядит применение на уровне класса
следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Printer&amp;lt;in T: User&amp;gt; { //появился in
    fun print(user: T) {
        println(&amp;quot;User ${user.login} is logged in&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Компилятор будет всячески не давать заполучть T из объектов типа контравариантного типу-параметру. После манипуляций выше наш
код ниже компилируется:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val admin = Admin(&amp;quot;admin&amp;quot;)
printAdmin(Printer&amp;lt;User&amp;gt;(), admin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И печатает:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User admin is logged in
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;producer-out-consumer-in&#34;&gt;Producer Out, Consumer In&lt;/h2&gt;

&lt;p&gt;В классической книге Effective Java автор Joshua Bloch предлагает аббревиатуру PECS для запоминания правила использования
ключевых слов extends и super в обобщенных типах Java. Аббревиатура гласит, &lt;code&gt;Producer Extends, Consumer Super&lt;/code&gt;, что
означает если класс является Producer&amp;rsquo;ом обобщенного типа, то необходимо использовать ключевое слово extends, а если потребителем, то
super. В Kotlin всё на много проще. Хотя мы можем переизобрести аббревиатуру блоха POCI (Producer Out, Consumer In),
это того не стоит. На самом деле, ключевые слова out и in говорят сами за себя, только думать нужно не в терминах иерархии типов,
а, скорее, думать о том как перемещаются данные. Если ваш класс поставляет обобщенно-типизированные значения наружу,
то вам нужен &lt;code&gt;out&lt;/code&gt;, а если класс потребляет значения обобщенного типа, то нужен &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;верхняя-граница-обобщенного-типа&#34;&gt;Верхняя граница обобщенного типа&lt;/h2&gt;

&lt;p&gt;Как вы уже заметили, несколько раз за статью я использовал конструкции вида &lt;code&gt;&amp;lt;T: SomeClass&amp;gt;&lt;/code&gt;. Прежде всего я хочу вас спросить,
а какой тип находится на вершине иерархии типов в Kotlin? Аналогично Object в Java, к чему можно привести любой тип?
Правильным ответом будет &lt;code&gt;Any?&lt;/code&gt;. Сам по себе класс &lt;code&gt;Any&lt;/code&gt; это аналог &lt;code&gt;Object&lt;/code&gt;, однако, в следствие поддержки Nullable и не
Nullable типов в Kotlin мы получили &lt;code&gt;Any?&lt;/code&gt;. Фактически, &lt;code&gt;Any?&lt;/code&gt; соответствует любому типу и &lt;code&gt;null&lt;/code&gt;, а &lt;code&gt;Any&lt;/code&gt; только любому типу.
Подробнее об иерархии типов я предлагаю прочитать статью, которую вы найдете в последнем разделе &amp;ldquo;Бонус&amp;rdquo;. Обобщенные
типы ограничены сверху максимально широким типом, а именно &lt;code&gt;Any?&lt;/code&gt; из-за чего может возникать некоторое недопонимание в использовании их.
Следовательно, по умолчанию дженерик тип - Nullable, это означает, что свойства с таким типом могут принимать значения
&lt;code&gt;null&lt;/code&gt;, но когда мы будем работать с ними, то компилятор потребует удостовериться, что через свойство доступно не null значение.
Таким образом, когда мы пишем &lt;code&gt;&amp;lt;T: Any&amp;gt;&lt;/code&gt; мы явно говорим, что тип, указываемый в качестве конкретного варианта вместо
обобщенного типа не может содержать &lt;code&gt;null&lt;/code&gt;. Аналогично, мы можем понизить верхнюю границу по иерархии еще ниже и потребовать, например,
указывать в качестве типов только чила: &lt;code&gt;&amp;lt;T: Number&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Верхних границ может быть несколько, в этом случае необходимо указывать их в специальном разделяющем &lt;code&gt;where&lt;/code&gt; условии:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Container&amp;lt;T&amp;gt;(var contained: T) 
        where T: Number, 
              T: Comparable&amp;lt;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Аналогично для функции для которой объявлен обобщенный тип.&lt;/p&gt;

&lt;h2 id=&#34;star-projection&#34;&gt;Star-Projection&lt;/h2&gt;

&lt;p&gt;Часто мы сталкиваемся с так называемой &lt;em&gt;проекцией типов&lt;/em&gt;. Простым языком, это ограничение типа на месте использования. Например,
мы не хотим, чтобы в наш контейнер могли по ошибке что-то записать внутри метода, для этого ограничиваем тип:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun process(container: Container&amp;lt;out Number&amp;gt;) {
    container.contained = 4 //не компилируется    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Благодаря out здесь мы можем только читать из контейнера, но не записывать. В примерах выше мы обсуждали это поведение.&lt;/p&gt;

&lt;p&gt;Однако, иногда возникает ситуация, что у нас нет информации о необходимом нам типе проекции, но мы знаем, что Container, к примеру, имеет
верхнюю границу для ковариантного параметра-типа - Number и нам этого достаточно. Тогда, мы можем воспользоваться star-projection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun process(container: Container&amp;lt;*&amp;gt;) { // символ *
    println(container.value) // мы можем печатать значения, т.к. знаем верхнюю границу обобщенного типа
    container.value = 4 // но мы не можем писать значения, т.к. не знаем типа
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для ковариантных параметров * означает &amp;ldquo;могу читать значения с типом верхней границы обобщенного типа&amp;rdquo;.
Для контравариантных параметров * означает &amp;ldquo;не могу ничего безопасно писать&amp;rdquo;
Для инвариантных параметров символ * означает: &amp;ldquo;при чтении аналогично * для ковариантного, при записи аналогично * для контравариантного параметра&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;стирание-типов&#34;&gt;Стирание типов&lt;/h2&gt;

&lt;p&gt;Аналогично с Java в Kotlin происходит стирание информации об обобщенных типах, т.е. обобщенные типы - наши помощники только
на этапе компиляции. На этапе выполнения кода информации уже нет, однако, есть хитрые способы, которые вы можете найти для
частного решения в некоторых случаях.&lt;/p&gt;

&lt;h2 id=&#34;reified-generics-и-inline-function&#34;&gt;Reified Generics и inline function&lt;/h2&gt;

&lt;p&gt;Модификатор inline для функций позволяет встраивать код в место вызова без какого-либо обращения к реальной функции.
Такой модификатор позволяет не создавать слишком много лямбд, которые передаются в методы и является небольшой оптимизацией.
Кроме того, этот модификатор позволяет сохранить информацию об обобщенных типах объявленных в рамках методов даже на этапе выполнения. Рассмотрим
небольшой пример:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;inline fun &amp;lt;reified T: Number&amp;gt; printClass(value: T) {
    println(T::class)
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    printClass(4)
    printClass(4.0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Результат выполнения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class kotlin.Int
class kotlin.Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ключевое слово &lt;code&gt;reified&lt;/code&gt; говорит о том, что нужно иметь доступ к информации о типе T. Таким образом, в некоторых случаях,
даже явно не передавая тип, мы можем работать с ним.&lt;/p&gt;

&lt;h2 id=&#34;резюме&#34;&gt;Резюме&lt;/h2&gt;

&lt;p&gt;Подводя итоги статьи, хочется отметить, что обобщенные типы - довольно сложная часть как Java, так и Kotlin и их понимание
крайне важно для бесстрашного построения гибких классов, готовых к разностороннему применению. Можно долго спорить,
что понятнее Java программисту, который пришел в Kotlin, Java синтаксис обобщенных типов или &lt;code&gt;out&lt;/code&gt; и &lt;code&gt;in&lt;/code&gt;. На мой взгляд,
если у вас есть понимание того для чего вы применяете обобщенные типы, то никакой синтаксис не помешает вам их использовать.&lt;/p&gt;

&lt;h2 id=&#34;бонус&#34;&gt;Бонус&lt;/h2&gt;

&lt;p&gt;Погружаясь в тему обобщенных типов вы можете посмотреть видео с конференции JPoint2016 &amp;ldquo;Неочевидные Дженерики&amp;rdquo; об обобщенных типах из Java
вот &lt;a href=&#34;https://www.youtube.com/watch?v=_0c9Fd9FacU&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Статья об &lt;a href=&#34;http://natpryce.com/articles/000818.html&#34; target=&#34;_blank&#34;&gt;иерархии типов в Kotlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Альтернативное &lt;a href=&#34;https://kotlinlang.ru/docs/reference/generics.html&#34; target=&#34;_blank&#34;&gt;чтение&lt;/a&gt; на тему дженериков&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>