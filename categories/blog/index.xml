<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Ivan Osipov</title>
    <link>https://i-osipov.ru/categories/blog/index.xml</link>
    <description>Recent content in Blog on Ivan Osipov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <atom:link href="https://i-osipov.ru/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to: переехать из Самары в Спб за 10 дней</title>
      <link>https://i-osipov.ru/post/my-relocation/</link>
      <pubDate>Sat, 25 Aug 2018 14:00:00 +0300</pubDate>
      
      <guid>https://i-osipov.ru/post/my-relocation/</guid>
      <description>

&lt;p&gt;Уфф, последний месяц как год жизни. Я не говорил, что мы с женой переехали из Самары в Санкт-Петербург? Нет? Ну, значит об этом я сегодня тебе и расскажу. Ты когда-нибудь искал чего-то большего в IT? Мы, программисты, работаем, постоянно учимся, развиваемся, но иногда хочется чего-то большего, хочется сделать серьёзный шаг вперед, сделать что-то такое, чего не делал раньше. В прошлом это подстегнуло меня отправиться выступать на JPoint, а сегодня поселиться в одном из районов г. Санкт-Петербург. Люблю такие моменты, что-то тебе кажется нереальным, сложным, невозможным, а ты берешь и раскладываешь это в набор шагов, последовательно выполняешь их и всё удается. Вся эта история приобрела определенный оттенок неопределенности, из-за нашего ожидания ребенка.&lt;/p&gt;

&lt;p&gt;Думаю, будет правильным разбить мой рассказ на несколько частей:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Предыстория&lt;/li&gt;
&lt;li&gt;В DataScience и обратно&lt;/li&gt;
&lt;li&gt;Поиск работы&lt;/li&gt;
&lt;li&gt;Переезд&lt;/li&gt;
&lt;li&gt;Поиск квартиры&lt;/li&gt;
&lt;li&gt;Адаптация на новом месте&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;предыстория&#34;&gt;Предыстория&lt;/h2&gt;

&lt;p&gt;Я начну с предыстории, но так как тебе не обязательно всё это читать, то ты можешь смело двигаться дальше. Мы с женой задумались о переезде пару лет назад, пока я был в поиске работы. Зачем? Этот вопрос мы задавали себе много раз&amp;hellip; Очень много раз! Проверка границ собственных возможностей, новый опыт, новые знакомства, новые приключения, ну и это просто прикольно, так делают далеко не все. Тогда, идею с переездом мы спустили на тормозах, приморозили, я получил &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; офферов в Самаре и решил остановиться на одном из вариантов, который, честно признаться, для меня тогда был в приоритете.&lt;/p&gt;

&lt;p&gt;Следующие 2 года в Самаре я работал в компании Haulmont, по моему скромному мнению, для такого человека как я это лучшее место в городе, если ты из Самары, то обязательно спросишь почему. Из крупных игроков у нас есть epam, сбертех, netcracker, но похоже я не хочу работать в крупных компаниях. Haulmont меньше, уютнее чтоли. Они показали мне хороший пример разработки веб приложений, шаблонов реализаций стандартных фич в платформе Cuba на которой строятся практически все решения компании. Я работал в бизнес юните Bespoke, там я занимался системами планирования большую часть своего времени и делал это для внешних заказчиков. Типичная backend разработка тоже не обошла меня стороной, но я чертовски полюбил эти планировщики и алгоритмы, которые крутятся за кулисами.&lt;/p&gt;

&lt;p&gt;Чуть меньше года мы снимали квартиру в 5 минутах пешком от офиса. Ох, это было прекрасное время, я никогда не чувствовал такого спокойствия по пути домой. Никаких маршруток, автобусов, ты просто прогуливаешься до соседнего дома. Единственный минус, у меня не было никакого времени на прослушивание аудио книг, которые я последнее время предпочитаю классическим. Мы снимали квартиру у пары, которая также в ожидании ребенка умчалась в Израиль, чтобы глава семейства изучал Java (забавное совпадение). Это была отличная демонстрация для нас того, что при желании никаких преград не существует, ну а я рассказываю эту историю, для тех у кого таких примеров не было.&lt;/p&gt;

&lt;h2 id=&#34;в-datascience-и-обратно&#34;&gt;В DataScience и обратно&lt;/h2&gt;

&lt;p&gt;Признаюсь открыто, я как и многие разработчики мечтал работать в JetBrains. Еще 2-3 года назад я задумался об этом. Ребята делают классный тулинг, я просто обязан был попасть к ним! Но тогда у меня было недостаточно лет стажа для этой компании. Забавно, что тогда, если я правильно помню они еще искали middle разработчиков и я думал о том, что &amp;ldquo;вырасту&amp;rdquo; и отправлюсь покорять северную столицу. Ха! Прошло 3 года, а их потребности выросли. Благо, и я не стоял на месте. К моменту начала поиска работы я заинтересовался DataScience, прошел солидную часть платных курсов на курсере и всерьез задумался, не сменить ли мне направление. На hh.ru я заметил вакансию на новый продукт, как раз в области DataScience и понял, что это мой шанс. Закинул резюме и начал общаться с HR, по каким-то причинам этот процесс затянулся на месяц. Надеюсь, что это частный случай, который коснулся только меня. Сначала мы пообщались с менеджером продукта, это довольно известный в тусовке DataScientist (я не спрашивал разрешения у людей для раскрытия их имен, по этому пусть все имена останутся тайной). Всё прошло хорошо и после очень долгого ожидания, мне назначили техническое интервью. Это был одновременно и счастливый и несчастный момент моей жизни. Счастливый, потому что я наконец-то попал на интервью в компании в которой давно мечтал работать. Почему несчастный? В ходе интервью я понял, что совершенно ничего не знаю о разработке тулинга, по крайней мере на том уровне, на котором это нужно. Это же поставило внутри меня под сомнение желание там работать, которое дремало где-то три года и пробудилось, чтобы исчезнуть. Вот так просто, наши дорожки разошлись, возможно не на всегда, но я благодарен ребятам, за то что помогли ценой своего времени в этом разобраться. Одновременно с этим во мне начал угасать интерес к DataScience до уровня &amp;ldquo;просто интересно&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;В Питере был запасной вариант - Яндекс. О них очень кратко, Яндекс мне показал пример таких собеседований, в которых я не хочу участвовать никогда, таким образом помог мне сформировать критерии отсева потенциальных работодателей, которые хотят пообщаться. Критерии очень простые, если компания пытается оценить тебя по балам прежде чем с тобой поговорят - к черту такие компании, в таком процессе собеседований нет души, если компания дает тебе задачки из серии спортивного программирования и хочет от тебя решения на время - к черту такие компании. В общем, спасибо Яндексу.&lt;/p&gt;

&lt;h2 id=&#34;поиск-работы&#34;&gt;Поиск работы&lt;/h2&gt;

&lt;p&gt;К моменту, когда я закончил общение с компаниями упомянутыми выше пришла пора моего отпуска. Я помню, был вечер, мы с женой сидели на кухне, пили чай и обсуждали потенциальный переезд, который не сложился, думали о том, что надо подождать рождения ребенка и переезжать только в следующем году. В тот момент, что-то внутри щелкнуло и я решил хотя бы взглянуть на остальные вакансии в Спб. Были посредственные, но были и реально интересные (к счастью всё сложилось с одной из компаний в начале моего топ списка). Тогда я решил для себя, что наберу пул вакансий и устрою интенсивную неделю созвонов. Это было не просто, но и не так сложно как бывает у других. Я конечно не ощущал себя в call центре, но по 3 созвона в день с разными незнакомыми людьми прививают некоторые навыки общения, при этом они разбавляются выполнением тестовых заданий. Мне понравились собеседования на английском, они дают очередное подтверждение, что 2 года изучения языка не прошли зря. Ты спросишь: &amp;ldquo;а какие вопросы задавали на собеседованиях?&amp;rdquo;. Конечно, везде по разному, но мне понравился процесс, например, в nexign. Сначала тебя опрашивают по основам в формате блица - быстрый вопрос, быстрый ответ, а наследующем собеседовании уже детально. Далеко не везде, у вас будут спрашивать задротские вопросы типа методы класса Object, но к сожалению, такие компании есть. Люди просто следуют протоколу, возможно у них нет выбора. На собеседованиях часто можно вскрыть пробелы в понимании каких-то деталей реализации, к счастью эти пробелы очень легко закрыть. Почти из каждого собеседования я выносил для себя список того о чем почитать, какие знания нужно добрать, это хорошо и интенсивно прокачивает. Например, теперь я знаю, что ext3 отличается от ext2 наличием журналирования, не знаю зачем мне это знание, но вдруг пригодится.&lt;/p&gt;

&lt;p&gt;На каждом из собеседований мне приходилось объяснять, что мы ждем ребенка и у меня ограничены сроки на принятие решения и переезд. К моему удивлению hr часто были готовы изменить процесс интервью для моей ситуации, это было приятно видеть, хотя и где-то я настоял на том, что хочу пройти их первичное тестирование (мне важно было понять будет ли компания тупо смотреть на баллы или в случае ошибок захочет их обсудить). В общем, следуя критериям, которые были сформированы раньше, я для себя отсеял ряд компаний и нашел ту самую, куда устроился и вот уже 3 недели работаю.&lt;/p&gt;

&lt;h2 id=&#34;переезд&#34;&gt;Переезд&lt;/h2&gt;

&lt;p&gt;Тебя наверно интересуют детали и шаги действий, так и быть. Ты получил оффер, принял его и если компания не организует ничего, а только оплачивает, то ты в такой же ситуации как и мы. Прежде всего запомни - списки - это твои лучшие друзья. Переезд в другой город затея не сложная, если всё грамотно организовать. Я буду описывать ситуацию, когда ты съезжаешь из съемной квартиры в съемную в другом городе. Будь готов к тому, что всё будет происходить очень быстро, но не забывай иногда останавливаться и оглянуться. В этот момент ты осознаешь всю простоту ситуации, то что никакой магии нет, это обычная реальность и происходит именно с тобой, находится под твоим контролем и следует твоему плану.&lt;/p&gt;

&lt;p&gt;Итак, как я сказал, оффер принят, что дальше? Составь список кому сообщить о переезде. На первом месте, по моему личному мнению должен быть твой текущий работодатель, т.к. именно от него многое зависит. В моем случае, я находился в трёхнедельном отпуске и всё было довольно просто, фактически я не вышел из отпуска. Инициируй выезд из квартиры, скажи о намерениях арендодателю и наконец можешь рассказывать родственникам и друзьям. В любом случае обязательно спланируй следующую неделю, нам хватило 10 дней на переезд, от момента принятия оффера до приземления в аэропорту Пулково. Плюс три дня на въезд в новую квартиру. Если план готов, то можно покупать билеты в одну сторону.&lt;/p&gt;

&lt;p&gt;Скорее всего у тебя есть некоторый объем вещей, который ты хочешь перевезти с собой. Для них понадобятся коробки и мешки. Здесь нужно оценить объем и отправиться, например в leroymerlin, там есть строительные мешки для мусора (подойдут для транспортировки мягких вещей) и коробки средние и маленькие, это для вещей, которые не хочется запылить в ходе переезда. Учти, что у компаний перевозчиков довольно пыльная работа и если ты как-то специально не защитишь свои коробки и мешки сам, то они обязательно покроются слоем транспортировочной пыли (особый вид пыли, который неизвестно откуда берется). Некоторые вещи могут не проходить по габаритам коробок, на этот случай транспортные компании предлагают жесткие упаковки, т.е. по сути часть твоего груза отделят деревянным каркасом от всего остального. Мы обратились в компанию ПЭК и получили честный результат, то, что имело жесткую упаковку приехало целым и невредимым, а вот те, коробки, которые не защищали были разбомблены, но функцию свою всё еще выполняли. Зато их было не жалко утилизировать. Не скупись на скотч и обязательно качественно проклей коробки (в интернете есть гайды). Суммарно в нашем случае транспортировка вещей из квартиры в Самаре (с выносом) в квартиру к Санкт-Петербурге (с доставкой в квартиру) обошлась нам меньше чем в 8к рублей, очевидно, что в твоем случае цифра будет иная, но люди любят цифры, даже если они ни о чем объективно не скажут. Из Самары в Питер вещи едут около недели или быстрее, про твой конкретный случай ты можешь уточнять на сайтах перевозчиков.&lt;/p&gt;

&lt;p&gt;Транспортируемые вещи можно разделить на пять категорий:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Вещи первой необходимости и документы (это то, что ты возьмешь в ручную кладь)&lt;/li&gt;
&lt;li&gt;Вещи на первое время жизни в другом городе (это чемоданы, как будто в отпуск)&lt;/li&gt;
&lt;li&gt;Оставшиеся вещи, которые приедут (то барахло с которым ты почему-то не смог расстаться)&lt;/li&gt;
&lt;li&gt;Вещи которые остаются (то барахло с которым ты смог расстаться, но не захотел выкидывать)&lt;/li&gt;
&lt;li&gt;Вещи которые выбрасываются (очевидно)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Для каждого пункта, кроме последнего должен быть свой список.
Планируй время так, чтобы успеть убедиться, что всё что нужное сложено в коробки, т.к. они уедут вперед тебя. Сложив коробки, нужно убедиться, что вещи для чемоданов и ручной клади умещаются.&lt;/p&gt;

&lt;p&gt;Куда отправлять вещи, если квартиры еще нет? В случае с ПЭК я отправил всё в терминал, а когда мне сообщили о их прибытии, я заказал доставку на адрес квартиры, которую только что снял. Об этом позже.&lt;/p&gt;

&lt;p&gt;Открепи ОМС, обычно это можно сделать в поликлинике, там сидят представители страховой.&lt;/p&gt;

&lt;p&gt;Сам переезд не что иное, как сдача прежней квартиры, ожидание самолета и перелет. Не обязательно иметь уже арендованную квартиру на месте, покупать кота в мешке никто не хочет, по этому придется побегать в первые дни.&lt;/p&gt;

&lt;p&gt;Заранее продумай как ты будешь перемещаться. В Спб есть карта &amp;ldquo;Подорожник&amp;rdquo; - это хороший вариант для общественного транспорта. Можно купить 40 поездок в метро на 30 дней, но кажется, что выгоднее купить пустую карту в терминале , а затем закинуть на неё денег, как я понял, там есть несколько вариантов её работы.&lt;/p&gt;

&lt;h2 id=&#34;поиск-квартиры&#34;&gt;Поиск квартиры&lt;/h2&gt;

&lt;p&gt;Есть категория людей, которые говорят, что авито - это сплошной развод. Так вот, игнорируй этот спам. Мы сняли квартиру через авито. Вообще на этом рынке есть целый набор сервисов:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Авито&lt;/li&gt;
&lt;li&gt;Циан&lt;/li&gt;
&lt;li&gt;Локалс&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Если ты готов платить деньги за подбор квартиры, то любой вариант устроит. Мы хотели поискать квартиру сами и если что-то пойдет не так, то всегда можно обратиться к риелтору. К счастью, через авито + мессенджеры мы оперативно могли спрашивать информацию у арендодателей. Подготовь список вопросов, которые для тебя важны в новом жилье и задавай его. Наш самолет приземлился рано утром, первые несколько дней мы гостили у родственников, но уже на второй день прибывания в СПБ договорились об аренде. Цена аренды везде разная, её можно посмотреть и в сервисах, которые я перечислил выше. В приложении авито можно сохранить поиск, а когда вы зайдете очередной раз в приложение, то увидите, что появилось новое объявление по вашему запросу. Авто оповещений вроде нет.&lt;/p&gt;

&lt;p&gt;Регистрация - это больно. При переезде для некоторых формальных вещей, например, постановки на учет в военкомат нужна временная регистрация. К сожалению, большинство наших сограждан не отличают временную регистрацию от постоянной, а постоянную называют пропиской. Подобные вопросы решаются индивидуально. К счастью, для прикрепления ОМС регистрация не требуется и для поликлиник тоже. Вообще, пока вы не купите автомобиль, не захотите получить визу или срочно встать на учет в военкомат она вам будет не к спеху, но по закону без неё можно жить в городе не более 90 дней. Строго говоря, для получения временной регистрации достаточно договора аренды.&lt;/p&gt;

&lt;p&gt;Как и везде с тебя обязательно попросят залог за квартиру в размере стоимости одного месяца аренды, т.е. если аренда стоит 30к, то нужно заготовить 60к для того, чтобы просто въехать. Часто можно договориться о рассрочке залога на несколько месяцев, например, ты первые 3 месяца платишь по 40к, таким образом спустя время формируется залог. Предварительно попроси договор аренды, это нужно для того, чтобы была возможность сделать правки в нём заранее. Убедись, что в нём прописано то, что при незапланированном выселении, тебя должны предупредить за месяц, так ты подстрахуешься и всем будет спокойнее. Убедись, что в договоре отмечено, что арендатор не может посещать квартиру чаще раза в месяц или того срока, который тебя устроит. Помни, что ты арендуешь собственность, на время аренды - квартира твоя и хотя со стороны арендатора ожидаемы визиты для его спокойствия - это твоё жильё, за которое ты заплатил деньги. Желательно, отметить в договоре кто с тобой будет снимать это жильё, например, жена.&lt;/p&gt;

&lt;h2 id=&#34;адаптация-на-новом-месте&#34;&gt;Адаптация на новом месте&lt;/h2&gt;

&lt;p&gt;Вот ты уже и переехал, даже нашел квартиру и снял её. Скорее всего на этом всё не закончится. Весьма вероятно, что на прежнем месте ты оставил часть повседневной утвари, которая нужна. &amp;ldquo;Это всё можно купить и там&amp;rdquo; - говорил ты, формируя пакеты с вещами, которые остаются. Вот, этот момент и настал. Здесь в зависимости от того, что тебе досталось от арендодателя формируется новый список - список покупок. Скорее всего это будет приличный объем расходов, так что заготовь деньги заранее. Обрати внимание на заказы онлайн, у крупных магазинов при заказе от определенной суммы можно получить бесплатную доставку, это очень удобно, особенно если нет машины.&lt;/p&gt;

&lt;p&gt;Покупай местную симку, операторы связи не дают возможности сохранить номер при переезде из региона в регион. Пройдись по салонам связи, их много около метро, собери буклеты с тарифными планами, а вечером дома спокойно выбери.&lt;/p&gt;

&lt;p&gt;После въезда в квартиру в ближайшие пару дней сходи в поликлинику к которой относишься, в случае Питера есть сайт &lt;a href=&#34;https://spboms.ru&#34;&gt;https://spboms.ru&lt;/a&gt;, где можно уточнить эту информацию. Тебе нужно будет прикрепить ОМС к местной страховой, обычно представителей можно найти прямо на территории поликлиники (или поищи &amp;ldquo;ОМС&amp;rdquo; в 2gis), затем тебе сформируют карточку и всё готово. Еще в Самаре я проделал некоторую предварительную работу, чтобы получить потерянную карточку из поликлиники, но она оказалась не нужна для создания новой на месте.&lt;/p&gt;

&lt;p&gt;К моменту, когда ты снял квартиру, закупился всем, чего не хватало, прикрепился к поликлинике, вещи скорее всего уже добрались до терминала перевозчика и их доставку можно заказывать у всё того же перевозчика.&lt;/p&gt;

&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Вот так. Теперь ты знаешь всё. Если показалось, что это довольно просто и очевидно, то так оно и есть. Основной посыл этого поста показать, что очередная вещь, которая может показаться сложной, далёкой и нереальной, проста в исполнении, если всё разложить по полочкам. Хочу отметить, что я не ярый сторонник переездов из регионов, просто это интересный опыт, который я захотел испытать.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo and Math</title>
      <link>https://i-osipov.ru/post/hugo-and-math/</link>
      <pubDate>Wed, 25 Apr 2018 09:17:46 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/hugo-and-math/</guid>
      <description>&lt;p&gt;Сейчас я в нахожусь в процессе прохождения курсов по Data Science и, как следствие, некоторые вещи мне хочется законспектировать
в виде блога. Основная проблема в том, что для конспектирования материала хотелось бы иметь возможность
писать математические формулы в LaTeX синтаксисе или около того. Если хорошенько поискать, то в документации
hugo можно наткнуться на вот &lt;a href=&#34;https://gohugo.io/content-management/formats/#mathjax-with-hugo&#34; target=&#34;_blank&#34;&gt;этот&lt;/a&gt;
раздел. Заметка будет полезна тем, кто организовывает свой блог через статик-генератор gohugo и хочет подключить поддержку
формул.&lt;/p&gt;

&lt;p&gt;Библиотека MathJax - js библиотека, которая позволяет отображать математические выражения описанные в LaTeX синтаксисе.
Для того, чтобы подключить поддержку этой библиотеки к вашему блогу, во-первых создадим пока пустой файл &lt;strong&gt;mathjax_support.html&lt;/strong&gt; и положим
его в папку исходников блога layouts/partials сразу же подключим и проинициализируем его в файле header.md перед закрывающим тегом &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; следующим образом:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ partial &amp;quot;mathjax_support.html&amp;quot; . }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Наполним файл следующим образом: укажем где найти библиотеку и как её проинициализировать.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Готово. На страничке &lt;a href=&#34;https://gohugo.io/content-management/formats/#mathjax-with-hugo&#34; target=&#34;_blank&#34;&gt;hugo документации&lt;/a&gt;
можно найти решения основных проблем при подключении библиотеки. Лично у меня заработало из коробки.&lt;/p&gt;

&lt;p&gt;В результате, следующий код:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$$
c^{2} = a^{2} + b^{2}
$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Превращается в формулу:&lt;/p&gt;

&lt;p&gt;$$
c^{2} = a^{2} + b^{2}
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instant View in Action</title>
      <link>https://i-osipov.ru/post/instant-view-in-action/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/instant-view-in-action/</guid>
      <description>

&lt;p&gt;Telegram идет большими шагами по планете и масштабы постоянно растут. Многие из нас часто читают
статьи на каналах, нажимают кнопку Instant View и вот, статья уже перед нами, но как это получилось?
Instant View работает по первой ссылке, но почему не по каждой? Сегодня мы с вами разберемся как взять
свой сайт и адаптировать Instant View к нему. Действовать мы будем на примере i-osipov.ru.&lt;/p&gt;

&lt;!--email_off--&gt;

&lt;h1 id=&#34;с-чем-мы-имеем-дело&#34;&gt;С чем мы имеем дело&lt;/h1&gt;

&lt;p&gt;Под капотом у i-osipov.ru находится hugo, hugo это генератор статического контента. Для понимания,
когда я пишу пост - у меня есть отдельный проект на диске в котором есть предопределенные директории.
В директориях лежит контент, например, в &lt;em&gt;content/post/*&lt;/em&gt; находятся все посты на сайте, а при
выполнении команды hugo в терминале стоя в корневой папке у меня генерируется статика, html + css + js,
используется преднастроенная тема, в итоге статика выгружается в GitHub репозиторий, публикуется с
помощью GitHub Pages, а i-osipov.ru лишь альтернативное имя, через которое доступен контент.&lt;/p&gt;

&lt;p&gt;Как вы можете догадаться, формат статики определяю не я, определяет hugo. Теперь передо мной стоит
задача разобраться в этом формате и научить Telegram генерировать Instant View для моего сайта.
Прежде всего, источниом информации по этому вопросу для меня является
&lt;a href=&#34;https://instantview.telegram.org/&#34;&gt;instantview.telegram.org&lt;/a&gt;. С этой страницы мы узнаем о том, что
Instant View (&lt;strong&gt;IV&lt;/strong&gt;) - это механизм позволяющий открывать ваши ссылки прямо в телеграм, это отличный user
friendly способ подать ваш контент, ваш сайт может быть не оптимизирован для мобильных устройств
(это нас не так волнует, т.к. у hugo с этим почти всё в порядке), а слово &lt;em&gt;Instant&lt;/em&gt; означает мгновенную
загрузку и кеширование на серверах телеграмма.&lt;/p&gt;

&lt;h1 id=&#34;как-работает-instant-view&#34;&gt;Как работает Instant View&lt;/h1&gt;

&lt;p&gt;Втавка ссылки на внешний контент в текстовое поле влечет за собой цепочку событий: генерируется link preview -
это короткая инфрмация о том какой контент доступен по ссылке, специальный &lt;em&gt;Instant View Bot&lt;/em&gt; проверяет,
есть ли шаблон IV для указанного сайта. После &lt;a href=&#34;https://instantview.telegram.org/#publishing-templates&#34;&gt;публикации шаблона&lt;/a&gt;
он становится доступен всем пользователям Telegram. До процесса глобальной публикации вы можете давать ссылку
читателям без процесса публикации и подтверждения, но об этом в разделе &lt;em&gt;Публикация&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;создание-instant-view&#34;&gt;Создание Instant View&lt;/h1&gt;

&lt;h2 id=&#34;редактор-instant-view&#34;&gt;Редактор Instant View&lt;/h2&gt;

&lt;p&gt;С этого момента начинается процесс разработки, так что если у вас есть к чему прикрутить IV, то самое время взять ноутбук и приготовится.&lt;/p&gt;

&lt;p&gt;Все манипуляции вашими IV происходят на странице &lt;a href=&#34;https://instantview.telegram.org/my&#34;&gt;instantview.telegram.org/my&lt;/a&gt;
При первом входе вас попросят залогиниться через telegram. Далее вы даёте ссылку на любой контент (пост на котором мы будем
отлаживать шаблон) на вашем сайте.
Что именно вы выберете - не так важно, главное, чтобы верстка контента была примерно одинаковой. Я возьму один из последних постов.
Редактор открылся, теперь мы видим следующую картину&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/instant_view_in_action/iv_editor.jpg&#34; alt=&#34;InstantViewEditor&#34; title=&#34;Instant View Editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Перед нами 3 рабочих пространства. Слева мы видим подгруженную, словно с телефона, версию страницы блога, по центру
расположилось поле для указания правил (это наше рабочее пространство), а справа мы видим результат - то, как примерно
будет выглядеть IV. На скриншоте по центру по умолчанию пусто, но для полноты я вписал туда &lt;code&gt;body: //article&lt;/code&gt;. Такая
простая конфигурация говорит о том, что тело нашего Instant View будет парситься Instant View Bot&amp;rsquo;ом прямо из html тега
под названием &lt;em&gt;article&lt;/em&gt; (выбранного благодаря xpath). Это первое из двух обязательных полей для создания Instant View, дальше мы разберем правила,
которые помогут сформировать качественное встроенное представление внутри Telegram из того контента, который доступен на
странице. При необходимости, вы можете перезагрузить исходную страницу и сохранить ваши описанные правила с помощью
&lt;code&gt;ctrl + S&lt;/code&gt; или &lt;code&gt;cmd + S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В нижней части страницы располагается результат последней операции и вывод функции @debug на которую мы взглянем в
разделе &lt;em&gt;Дебаггер&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;С помощью символа &lt;code&gt;#&lt;/code&gt; обозначается начало комментария, текст справа этого символа не интерпритируется.&lt;/p&gt;

&lt;h2 id=&#34;панель-разработчика&#34;&gt;Панель разработчика&lt;/h2&gt;

&lt;p&gt;Важнейший инструмент на этапе построения Instant View это Панель разработчика в вашем браузере. К примеру, в Google
Chrome она открывается при нажатии &lt;code&gt;F12&lt;/code&gt; или &lt;code&gt;Ctrl + Shift + I&lt;/code&gt;, либо поищите в меню Дополнительные инструменты -
Инструменты разработчика.&lt;/p&gt;

&lt;h2 id=&#34;фильтрация-контента&#34;&gt;Фильтрация контента&lt;/h2&gt;

&lt;p&gt;Помните, что Instant View предназначен для относительно стачесных статей, центральная страница динамичного сайта -
плохой кандидат для IV. Следовательно и не каждая станица интересующего сайта нам подойдет. Часто, статьи обособляются
html тегом &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; и это знак того, что на странице есть статья. Для того, чтобы по ошибке Instant View Bot не интерпретировал
ссылки на другие страницы сайта как встроенные, нам необходимо добавить условия.&lt;/p&gt;

&lt;h2 id=&#34;условия&#34;&gt;Условия&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#conditions&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Условия начинаются либо с &lt;code&gt;?&lt;/code&gt;, либо с &lt;code&gt;!&lt;/code&gt; по следующему формату:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?condition:  xpath_query   # пример условия
!condition:  regexp        # в правой части условия находится регулярное выражение
?condition                 # условие без параметров
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если условия следуют друг за другом, то они интерпретируются как единый блок, где &lt;code&gt;?&lt;/code&gt;-правила это ИЛИ, а &lt;code&gt;!&lt;/code&gt;-правила
это И. В блоке условий должно быть как минимум одно условие ИЛИ.&lt;/p&gt;

&lt;p&gt;Несколько блоков условий выглядят следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?exists: //article
# здесь мы пишем правила, которые применим когда на странице есть тег article

?exists: //content
# здесь мы пишем правила, которые применим когда на странице есть тег content, а тега article может и не быть

?exists: //content
!exists: //article
# здесь мы пишем правила, которые применим когда на странице и есть тег contentи тег article
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конечно, кроме условия &lt;code&gt;exists&lt;/code&gt; существуют и другие, ниже их полный список на текущий момент:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?domain: regexp # проверяет соответствует ли домен регулярному выражению

?domain_not: regexp # проверят не запрещен ли домен

?path: regexp # проверяет путь до текущей страницы соответствует регулярному выражению

?path_not: regexp # проверяет, что путь не соответствует регулярному выражению

?exists: xpath_query # проверяет наличие узла на странице

?not_exists: xpath_query # проверяет отсутствие узла на странице

?true
# правила здесь будут применены всегда
?false
# правила здесь не применятся никогда (по сути место для неработающих правил)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для нашего примера я выбрал следующие условия:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?exists: //article
!domain: i-osipov\.ru
!path: /post/.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Посты находятся всегда под i-osipov.ru/post/* и в каждом посте должен существовать тег &lt;em&gt;article&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;свойства&#34;&gt;Свойства&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#properties&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Свойства содержат в себе значения и имеют следующий формат:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;property: xpath_query
property: &amp;quot;Some string&amp;quot;
property: null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;По умолчанию свойства не переопределяются, т.е. если не нулевое значение было записано в свойство, то для того, чтобы
его переопределить, нужно испрользовать символ &lt;code&gt;!&lt;/code&gt;, т.е. конструкция &lt;code&gt;property!: //content&lt;/code&gt; сможет обновить свойство,
если правая часть вернет не возвращает пустой результат и не &lt;code&gt;null&lt;/code&gt;. Если же правая часть вернет пустой результат,
то значение не переопределится, для того, чтобы это произошло, необходимо воспользоваться &lt;code&gt;!!&lt;/code&gt;. В результате,
&lt;code&gt;property!!: //content&lt;/code&gt; перезапишет значение свойства вне зависимости от результата.&lt;/p&gt;

&lt;p&gt;Ранее, я упоминал о том, что есть два свойства, которые обязательно нужно определить. Мы уже познакомились со свойством
&lt;code&gt;body: //article&lt;/code&gt;, которое помогает Instant View Bot определить где же находится основной контент статьи. Второе,
обязательное к определению свойство это &lt;code&gt;title&lt;/code&gt;, например, правило &lt;code&gt;title: //article//h1&lt;/code&gt; выберет заголовок первого уровня внутри
блока статьи и объяснит IV Bot&amp;rsquo;у, через свойство &lt;em&gt;title&lt;/em&gt;, где же смотреть название статьи.&lt;/p&gt;

&lt;p&gt;Рассмотрим другие свойства, которые нам доступны из коробки:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Формат описания
название: тип # пояснение
Для создания свойства в конструкциях ниже тип нужно заменить конкретным значением

title: RichText # заголовок страницы
body: RichText # тело страницы
author: String # имя автора
author_url: URL # ссылка на автора
published_date: Unixtime # дата публикации
description: String # краткое описание для превью ссылки
image_url: Url # ссылка на фото для превью ссылки
document_url: Url # ссылка на документ для превью ссылки
channel: String # указатель на авторский канал, например, @channelName
cover: Media # Обложка страницы
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для нашего примера, я обозначу следующие свойства&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body: //article
title: //h1
channel: &amp;quot;@from_junior_to_senior&amp;quot;
description: //h2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Наших текущих знаний хватает только на такие простые манипуляции, но даже их достаточно для минимального варианта.
Для полноты картины пока &amp;ldquo;захардкодим&amp;rdquo; остальные интересующие нас значения, например, так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;author: &amp;quot;Ivan Osipov&amp;quot;
author_url: &amp;quot;https://i-osipov.ru&amp;quot;
published_date: &amp;quot;2017-07-23&amp;quot;
image_url: &amp;quot;https://i-osipov.ru/img/posts/how_to_create_telegram_bot/header.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В следующих разделах мы с вами перепишем этот хардкод, но пока так.&lt;/p&gt;

&lt;p&gt;Результат таких манипуляций ниже на скриншоте редактора:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/instant_view_in_action/iv_step1.jpg&#34; alt=&#34;Instant View. Шаг 1&#34; title=&#34;Instant View. Шаг 1&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;типы-данных&#34;&gt;Типы данных&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#supported-types&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В главе выше мы затронули типы и прежде всего необходимо пояснить, что страница Instant View содержит разные типы.
Каждый тип ассоциирован с html тегом, например, тип &lt;code&gt;Header&lt;/code&gt; определяет объекты созданные на основе тегов &lt;code&gt;&amp;lt;h1&amp;gt; - &amp;lt;h4&amp;gt;&lt;/code&gt;.
У типов есть допустимые дочерние типы, по сути, это те, кто могут быть вложены внутрь. Благодаря типам, практически
весь контент под тегом &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; может быть распознан без дополнительных усилий. Типы важная, но при этом довольно
простая составляющая Instant View, по этому полный перечень с описанием доступен по
&lt;a href=&#34;https://instantview.telegram.org/docs#supported-types&#34;&gt;ссылке&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;На ваших страницах может быть представлен какой-либо код на опрежеденном языке, телеграм не поддерживает подстветку
синтаксиса, но они планируют сделать это в будущем. По этой причине, для больших блоков кода обособленных в &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;
желательно указывать аттрибут &lt;code&gt;data-language&lt;/code&gt;, как результат, подстветка кода в Instant View появится сама собой со
временем.&lt;/p&gt;

&lt;h2 id=&#34;переменные&#34;&gt;Переменные&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#variables&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Концепция переменных знакома вам из любого языка программирования. Здесь основное предназначение переменных - гибкое
манипулирование ими перед назначением их значений свойствам. Кратко, у нас есть идентификатор, который начинается с &lt;code&gt;$&lt;/code&gt;,
например, &lt;code&gt;$myvariable&lt;/code&gt; и есть значение. Идентификатор может быть только в нижнем регистре. Значение переменной может
быть xpath или строка, в последнем  случае переменная будет содержать
список из одного текстового элемента в котором определен заданный в строке текст. Кроме того, вы можете назначить
переменной &lt;code&gt;null&lt;/code&gt;, что позволяет сбросить значение в ней. Вы можете свободно менять значение переменной, если же вы
хотите назначить переменной значение только в том случае, если раньше никакое значение не было присвоено, то можно
воспользоваться символом &lt;code&gt;?&lt;/code&gt;, написанным после идентификатора, вот так &lt;code&gt;$myvariable?&lt;/code&gt;,
в том месте, где происходит смена значений.&lt;/p&gt;

&lt;p&gt;Резюмируя, мы можем менять значения переменных следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$images:  //img
$images: //img[@src]  # значение переменной $images будет переопределено
$images?: //article//img  # новое значение для переменной $images будет выставлено, если в переменной ничего не записано
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для того, чтобы объяснить вторую строчку и что же такое &lt;code&gt;//img[@src]&lt;/code&gt; давайте поговорим о расширенном XPath.&lt;/p&gt;

&lt;h2 id=&#34;расширенный-xpath&#34;&gt;Расширенный XPath&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#extended-xpath&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Прежде всего нужно сказать, что у нас есть чуть больше чем XPath для формирования выборки узлов html документа. Если вы пока не
знакомы с XPath, то самое время это сделать. Начать можно &lt;a href=&#34;https://ru.wikipedia.org/wiki/XPath&#34;&gt;отсюда&lt;/a&gt;. Кратко,
XPath это язык, который позволяет навигироваться по XML. Нtml и Xml родственные форматы, по этому мы можем навигироваться и
по Html.
Взглянем на дополнительные возможности, которые дает нам расширенный XPath от Telegram.&lt;/p&gt;

&lt;h3 id=&#34;относительный-xpath&#34;&gt;Относительный XPath&lt;/h3&gt;

&lt;p&gt;В разделе &lt;em&gt;Переменные&lt;/em&gt; мы узнали о таком типе правил как объявление переменных, здесь этот концепт нам пригодится.
Стандартный XPath выполняет поиск по всему документу (мы указываем абсолютное выражение для поиска, искать будем от
корня документа), однако, это порождает длинные цепочки описания путей до узлов. В расширенном XPath мы можем объяснить
в каком контексте необходимо выполнять поиск при помощи переменных. Представим, что у нас есть следующее html дерево.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
    &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Заголовок 1 уровня&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;Заголовок 2 уровня&amp;lt;/h2&amp;gt;
    &amp;lt;/article&amp;gt;
&amp;lt;/body&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для навигации по такому дереву мы можем использовать стандартный XPath&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//article/h1 # находит &#39;Заголовок 1 уровня&#39;
//article/h2 # находит &#39;Заголовок 2 уровня&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Либо, так как мы изначально знаем о том, что поиск будет выполняться внутри узла &lt;code&gt;article&lt;/code&gt;, то можем воспользоваться
переменной и таким образом задать контекст:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$myArticle: //article
$myArticle/h1 # находит &#39;Заголовок 1 уровня&#39;
$myArticle/h2 # находит &#39;Заголовок 2 уровня&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;один-узел-вместо-нескольких&#34;&gt;Один узел вместо нескольких&lt;/h3&gt;

&lt;p&gt;Иногда, мы знаем, что XPath вернет нам несколько результатов, но мы хотим только первый, второй или любой другой из
них. По умолчанию XPath возвращает список узлов, однако, для того, чтобы сузить область поиска мы можем явно выбрать
один из полученных узлов с помощью выражения &lt;code&gt;(xpath_query)[n]&lt;/code&gt;, здесь &lt;code&gt;n&lt;/code&gt; - это порядковый номер узла в списке,
полученном с помощью &lt;code&gt;xpath_query&lt;/code&gt;. Нумерация начинается с 1, либо на месте &lt;code&gt;n&lt;/code&gt; можно записать &lt;code&gt;last()&lt;/code&gt; и тогда
будет выбран последний элемент. Такой синтаксис поддерживается только для всего выражения целиком. Ниже несколько примеров:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$headers:    //h1                    # все &amp;lt;h1&amp;gt; узлы на странице
$header2:    (//h1)[2]               # второй &amp;lt;h1&amp;gt; узел на странице
$header2:    ($headers)[2]           # аналогично предыдущему
$last_link:  ($header2//a)[last()]   # последняя ссылка (&amp;lt;a&amp;gt;) внутри контекста $header2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;выбор-по-css-классу&#34;&gt;Выбор по css классу&lt;/h3&gt;

&lt;p&gt;Отличный инструмент, который мы получили с расширенным XPath это выражение &lt;code&gt;has-class(&amp;quot;class&amp;quot;)&lt;/code&gt;, которое позволяет выбирать
узлы имеющие определенный класс. Это выражение - сокращение следующего
&lt;code&gt;contains(concat(&amp;quot; &amp;quot;, normalize-space(@class), &amp;quot; &amp;quot;), &amp;quot; class &amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Я покажу практическое применение инструмента на своём же блоге, для которого настраиваю Instant View. Ранее мы присвоили
свойствам title и description следующие значения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title: //h1
description: //h2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Но это не до конца верно, правильнее ограничить контекст поиска и мы можем это сделать. Все заголовки документа могут
быть доступны только через &lt;code&gt;div&lt;/code&gt; элемент с классом &lt;code&gt;post-heading&lt;/code&gt;, зная это, мы можем воспользоваться &lt;code&gt;has-class&lt;/code&gt; и
получим следующее обновление для нашего шаблона.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$header: //div[has-class(&amp;quot;post-heading&amp;quot;)]
title: $header/h1
description: $header/h2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;элемент-одного-уровня&#34;&gt;Элемент одного уровня&lt;/h3&gt;

&lt;p&gt;XPath дает нам мощные возможности для поиска, но не всегда они легко читаемы, последние два улучшения - это сокрщенные
формы стандарных XPath выражений. В стандартном XPath мы можем донянуться до предшествующего &lt;code&gt;sibling&lt;/code&gt; узла (по русски это
&amp;ldquo;элемент одного уровня&amp;rdquo;) следующим образом: &lt;code&gt;preceding-sibling::*[1]/self&lt;/code&gt;, расширенный XPath дает нам сокращения в виде
&lt;code&gt;prev-sibling&lt;/code&gt;, можно сравнить в применении:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$divsAfter: //div[./preceding-sibling::*[1]/self::img] # Собирает все div элементы предшествующие узлам img

$divsAfter: //div[./prev-sibling::img] # Сокращенная форма того же самого
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для последующих элементов есть аналогичное выражение &lt;code&gt;next-sibling&lt;/code&gt;, которое является сокращением
&lt;code&gt;following-sibling::*[1]/self&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;функции&#34;&gt;Функции&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#functions&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Пожалуй важнейший и очень гибкий вид правил - функции. С их помощью вы сможете удалять ненужные элементы, производить
трансформации одних элементов в другие и так далее. Функции начинаются с символа &lt;code&gt;@&lt;/code&gt; и есть несколько разных форматов
их применения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@function:                 xpath_query   # функция без параметров
@function(param):          xpath_query   # дополнительный параметр указывается в скобках
@function(p1 p2):          xpath_query   # параметры могут быть разделены пробелом
@function(p1, &amp;quot;param #2&amp;quot;): xpath_query   # или запятой и заключены в кавычки при необходимости
@function:                 &amp;quot;Some text&amp;quot;   # вместо xpath можно использовать строки
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;У функции определяется основной аргумент, например, xpath выражение или строка. Основной аргумент записывается справа
от &amp;ldquo;:&amp;ldquo;. В случае строки в качестве аргумента, на самом деле, будет передан список с одним тектовым элементом, который
содержит указанный текст.&lt;/p&gt;

&lt;p&gt;Разберем пример. Внутри тега &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, который содержит контент статьи, находится блок с комментариями, это встроенные
Disqus комментарии. Однако, эти комментарии не поддерживаются в Instant View и нам необходимо их исключить. Для его
мы воспользуемся функцией &lt;code&gt;@remove&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Открыв консоль разработчика в Chrome и выбрав элемент, который я хочу удалить, я обнаружил, что в DOM дереве исходной
страницы есть два элемента. Эта часть дерева выглядит примерно так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;...
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;amp;lt;a href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&amp;amp;gt;comments powered by Disqus.&amp;amp;lt;/a&amp;amp;gt;&amp;lt;/noscript&amp;gt;
&amp;lt;a href=&amp;quot;http://disqus.com&amp;quot; class=&amp;quot;dsq-brlink&amp;quot;&amp;gt;comments powered by &amp;lt;span class=&amp;quot;logo-disqus&amp;quot;&amp;gt;Disqus&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Узел &lt;code&gt;noscript&lt;/code&gt; довольно просто обнаружить и удалить. &lt;code&gt;$body&lt;/code&gt; ниже это отсылка к телу статьи, к свойству
&lt;code&gt;body&lt;/code&gt;, которое мы проинициализировали в самом начале используя XPath &lt;code&gt;//article&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@remove: $body//noscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Со ссылкой, следующей за узлом &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; всё не так очевидно, здесь мне помогла функция &lt;code&gt;@debug&lt;/code&gt;, благодаря этой
функции вы можете понять находит ли XPath желаемый элемент или нет. Применение выглядит следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@debug: $body//noscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Результат применения вы увидите в самом низу страницы редактора.
Здесь я могу применить расширенный XPath и сказать &amp;ldquo;Удали все узлы &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; перед которыми есть узел того же уровня &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@remove: $body//a[prev-sibling::noscript]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Успех? Нет! Оказывается, из-за того, что сначала мы удалили &lt;em&gt;noscript&lt;/em&gt;, а затем опирались на него при поиске &lt;em&gt;a&lt;/em&gt;, то
интерпритатор в конце не нашел ни одного &lt;em&gt;a&lt;/em&gt; у которого предшественник &lt;em&gt;noscript&lt;/em&gt;. Понять это получилось опять же,
благодаря функции &lt;code&gt;@debug&lt;/code&gt;. В результате, поменяв местами вызовы функции &lt;code&gt;@remove&lt;/code&gt; мы последовательно удалили оба
не нужных элемента.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@remove: $body//a[prev-sibling::noscript]   # Сначала удаляем ссылку следующую за noscript
@remove: $body//noscript                    # Затем удаляем сам noscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Также функции могут явно или неявно работать со специальными переменными.&lt;/p&gt;

&lt;h3 id=&#34;специальные-переменные&#34;&gt;Специальные переменные&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#special-variables-and&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Когда мы работаем с функцией у которой справа записан xpath, то мы можем на следующей строке получитьрезультат этого
выражения не повторяя его. Этот результат хранится в переменной &lt;code&gt;$$&lt;/code&gt;, т.е. мы можем сделать, например, так&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;description: $header/h2
@debug: $$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После чего внизу редактора увидим, какой же результат мы записали в description. Также каждая функция выполняет некую
трансформацию, обрабатывает входящие элементы и получает какой-то результат. Собственно, сам результат можно получить
из переменной &lt;code&gt;$@&lt;/code&gt;. Итак:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt; - содержит результат самого последнего XPath выражения;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt; - содержит значение возвращаемое последней запущенной функцией.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;description: $header/h2     # определяет описание страницы
@debug                      # выводит описание, по умолчанию вместо xpath подразумевается $$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;другие-функции&#34;&gt;Другие функции&lt;/h3&gt;

&lt;p&gt;В конце этого руководства я приведу описание каждой из доступных функций, но для специфик применения, предлагаю обратиться к оригинальной
документации по ссылкам. См. приложение А.&lt;/p&gt;

&lt;p&gt;Используя изученные в приложении А функции мы можем, для начала, улучшить последний процесс удаления хвостов от disqus.
Раньше мы удаляли хвосты так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@remove: $body//a[prev-sibling::noscript]   # Сначала удаляем ссылку следующую за noscript
@remove: $body//noscript                    # Затем удаляем сам noscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь мы воспользуемся функцией &lt;code&gt;@combine&lt;/code&gt;, которая склеивает заданные узлы в один &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; узел. А затем удалим результат
склейки.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@combine: $body//noscript/next-sibling::a
@remove
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Нам осталось разобраться, как правильно обозначить автора, дату публикации и ссылку на картинку для превью.&lt;/p&gt;

&lt;p&gt;Для получения картинки, воспользуемся функцией &lt;code&gt;@background_to_image&lt;/code&gt;, она преобразует стиль в элемент &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;.
Результат функции присвоим переменной &lt;code&gt;$main_image&lt;/code&gt;, значение атрибутта &lt;code&gt;src&lt;/code&gt; присвоим свойству &lt;code&gt;image_url&lt;/code&gt;, а саму картинку
добавим в начало статьи. Всё это делается следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@background_to_image: //header[has-class(&amp;quot;intro-header&amp;quot;)]   # нашли картинку
$main_image: $@                                             # сохранили узел в переменную

@prepend_to($body): $main_image                             # вставили в начало контента
image_url: $main_image/@src                                 # обозначили её как картинку для preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Инструменты разработчика Chrome подсказывают, что оставшаяся интересующая нас информация находится в той же части
дерева элементов, что и заголовки для статей, по этому воспользуемся, уже определенным ранее &lt;code&gt;$header&lt;/code&gt;. Нам осталось
извлечь из дерева имя автора и дату публикации. Извлечение данных, я сделал следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$extra_meta: $header/span       # уточняем поддерево с метаданными

$author: ($extra_meta/a)[1]     # выбираем первую ссылку в списке
author: $author/text()          # извлекаем её название, в моем случае это автор

@match(&amp;quot;Дата публикации: ([0-9]{4}-[0-9]{2}-[0-9]{2})&amp;quot;, 1): $extra_meta # в поддереве с метаданными ищем дату по регулярному выражению и забираем первую группу
published_date: $@              # присваиваем результат поиска
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;встраиваемые-элементы&#34;&gt;Встраиваемые элементы&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#embedded-elements&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В вашем случае могут быть медиа элементы, которые вы так же хотели бы встроить. Сегодня телеграм поддерживает следующие
сервисы для встраивания в Instant View:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Youtube&lt;/li&gt;
&lt;li&gt;Vimeo&lt;/li&gt;
&lt;li&gt;Tweets &amp;amp; Twitter Videos&lt;/li&gt;
&lt;li&gt;Facebook Posts &amp;amp; Videos&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Giphy&lt;/li&gt;
&lt;li&gt;SoundCloud&lt;/li&gt;
&lt;li&gt;GithubGist&lt;/li&gt;
&lt;li&gt;Aparat&lt;/li&gt;
&lt;li&gt;VK.com Videos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;включения-системные-правила&#34;&gt;Включения (системные правила)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#include&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Включения - это системные правила и вам их нет необходимости использовать для собственных нужд, но знание того что
это пригодится для понимания работы Telegram Instant View.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ core.telegram.org # вставляет блок правил, который используется для core.telegram.org
?not_exists: $body  # если не найдет, то ...
+ telegram.org      # вставляет другой блок
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Я вижу один вариант использования. Это если ваш сайт на одном движке с кем-то, для кого уже есть готовые правила&lt;/p&gt;

&lt;h2 id=&#34;обработка-страниц&#34;&gt;Обработка страниц&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#processing-pages&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Все страницы обрабатываются по следующим правилам:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Url: http://example.com/some_page.html
+ example.com
?true
+ ..after
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если же страница находится на поддомене, то она обрабатывается так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Url: http://some.subdomain.example.com/some_page.html
+ some.subdomain.example.com
?not_exists: $body
+ subdomain.example.com
?not_exists: $body
+ example.com
?true
+ ..after
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Следовательно, сначала Instant View Bot ищет шаблон для полного домена и если он не находит проинициализированного свойства
&lt;em&gt;body&lt;/em&gt;, то понижает уровнь домена и ищет шаблон для него. Блок правил &lt;code&gt;..after&lt;/code&gt; выполняется для всех доменов.&lt;/p&gt;

&lt;h2 id=&#34;instant-view-для-поддоменов&#34;&gt;Instant View для поддоменов&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#working-with-subdomains&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Если страница обрабатывается для поддомена, то необходимо вручную выбрать уровень домена, который необходим в левом
верхнем углу редактора.&lt;/p&gt;

&lt;h2 id=&#34;публикация&#34;&gt;Публикация&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://instantview.telegram.org/#publishing-templates&#34;&gt;Документация&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Для того, чтобы посмотреть результат нажмите на кнопку View In Telegram и если у вас есть десктопное приложение, то в нем
вам предложат отправить кому-нибудь ссылку, которая будет открывать ваш тестовый пример через Instant View.&lt;/p&gt;

&lt;p&gt;Публикация для всех пользователей Telegram происходит только после подтверждения вашего шаблона командой Telegram.
До этого момента вы можете распространять ссылки с истользованием шаблона, даже без подтверждения. Для этого вам нужно
составить ссылку в формате: &lt;code&gt;t.me/iv?url=...&amp;amp;rhash=...&lt;/code&gt;, где url это ссылка на публикацию, а &lt;code&gt;rhash&lt;/code&gt; - идентификатор
шаблона.&lt;/p&gt;

&lt;h2 id=&#34;бонус-instant-view-и-cloudflare&#34;&gt;Бонус. Instant View и Cloudflare&lt;/h2&gt;

&lt;p&gt;В своих прошлых статьях, я рассказывал о том, что в качестве DNS серверов для i-osipov.ru используются DNS сервера
Cloudflare. Кроме того, Cloudflare это прокси защищающий от DDOS и при реализации Instant View я заметил одну небольшую
особенность. Из коробки этот замечательный сервис предоставляет услугу, которая называется &amp;lsquo;Email protection&amp;rsquo;, по сути
в определенном наборе ситуаций, которые можно детектировать как &amp;ldquo;бот, который обходит интернет и собирает email&amp;rsquo;ы для
спама&amp;rdquo;, Cloudflare заменят все email&amp;rsquo;ы обсусцирует email&amp;rsquo;ы на странице. Instant View Bot такой же подозрительный тип,
но всё ради безопасности. Тем ни менее, в статье про то &amp;ldquo;как написать бота для телеграма&amp;rdquo; есть полная форма команды
оправляемая телеграм боту, напомню что выглядит она вот так: &lt;code&gt;/command@BotName&lt;/code&gt;. Проблема в том, что cloudflare распознает
как email всё что справа от слеша и отдает неправильную страничку боту. Как это исправить? Все подробности есть
&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200170016-What-is-Email-Address-Obfuscation-&#34;&gt;здесь&lt;/a&gt;, если коротко,
то вы должны встроить в код страницы тег &lt;code&gt;&amp;lt;!--email_off--&amp;gt; здесь cloudflare не будет защищать email&#39;ы &amp;lt;!--/email_off--&amp;gt;&lt;/code&gt;.
Да, вы правильно поняли, для того, чтобы показать вам команду для бота и в этой статье, мне пришлось снова встроить
комментарии отключающие cloudflare email protection.&lt;/p&gt;

&lt;h2 id=&#34;шаблон-для-i-osipov-ru&#34;&gt;Шаблон для i-osipov.ru&lt;/h2&gt;

&lt;p&gt;В итоге, мы получили следующий шаблон:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?exists: //article
!domain: i-osipov\.ru
!path: /post/.+

body: //article

$header: //div[has-class(&amp;quot;post-heading&amp;quot;)]
title: $header/h1
description: $header/h2

channel: &amp;quot;@from_junior_to_senior&amp;quot;

$extra_meta: $header/span

$author: ($extra_meta/a)[1]
author: $author/text()

author_url: &amp;quot;https://i-osipov.ru&amp;quot;

@match(&amp;quot;Дата публикации: ([0-9]{4}-[0-9]{2}-[0-9]{2})&amp;quot;, 1): $extra_meta
published_date: $@

@background_to_image: //header[has-class(&amp;quot;intro-header&amp;quot;)]
$main_image: $@

@prepend_to($body): $main_image
image_url: $main_image/@src

@combine: $body//noscript/next-sibling::a
@remove
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На самом деле в шаблон входит еще и обнотка неподдерживаемых таблиц, вместо них можно отображать ссылку на сайт с
полным контентом. Как это сделать вы можете подглядеть в публичком шаблоне для i-osipov.ru или поразмышлять самостоятельно.&lt;/p&gt;

&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Telegram Instant View это мощный инструмент, который поможет вам интегрировать ваш контент в инфраструктуру Telegram.
Относиться к Instant View можно по разному, но на мой взгляд, если вы можете сделать жизнь вашего читателя еще лучше -
сделайте это. Со своей стороны, я надеюсь, что этот документ поможет вам легко разобраться в создании Instant View и
улучшить UX ваших статей. Для достижения совершенства обратите внимание на
&lt;a href=&#34;https://instantview.telegram.org/checklist&#34;&gt;Чеклист Идеального Instant View&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;приложение-а&#34;&gt;Приложение А&lt;/h1&gt;

&lt;p&gt;Функции для детальной настройки форматирования&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#debug&#34;&gt;@debug&lt;/a&gt; отладка команд, вывод результов в нижней части редактора;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#append&#34;&gt;@append&lt;/a&gt; вставляет переданные элементы &lt;strong&gt;в начало&lt;/strong&gt; каждого найденного по XPath;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#prepend&#34;&gt;@prepend&lt;/a&gt; вставляет переданные элементы &lt;strong&gt;в конец&lt;/strong&gt; каждого найденного по XPath;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#after&#34;&gt;@after&lt;/a&gt; вставляет переданные элементы &lt;strong&gt;после&lt;/strong&gt; каждого найденного по XPath;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#before&#34;&gt;@before&lt;/a&gt; вставляет переданные элементы &lt;strong&gt;перед&lt;/strong&gt; каждым найденным по XPath;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#append-to&#34;&gt;@append_to&lt;/a&gt; вставляет целевой узел в конец базового;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#prepend-to&#34;&gt;@prepend_to&lt;/a&gt; вставляет целевой узел в начало базового;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#after-el&#34;&gt;@after_el&lt;/a&gt;  вставляет целевой узел после базового;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#before-el&#34;&gt;@before_el&lt;/a&gt; вставляет целевой узел перед базовым;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#replace-tag&#34;&gt;@replace_tag&lt;/a&gt; изменяет имя тега;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#wrap&#34;&gt;@wrap&lt;/a&gt; заворачивает целевой элемент в заданный тег;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#clone&#34;&gt;@clone&lt;/a&gt; создает копию целевого узла;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#detach&#34;&gt;@detach&lt;/a&gt; отделяет целевой узел от оставшейся части, создает копию родительского узла;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#pre&#34;&gt;@pre&lt;/a&gt; помечает текст внутри целевого узла как отформатированный;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#set-attr&#34;&gt;@set_attr&lt;/a&gt; устанавливает аттрибут в каждом соответствующем узле;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#set-attrs&#34;&gt;@set_attrs&lt;/a&gt; устанавливает несколько аттрибутов;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#match&#34;&gt;@match&lt;/a&gt; выполняет поиск на основе регулярного выражения, в результате, заменяет содержимое целевого узла;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#replace&#34;&gt;@replace&lt;/a&gt; выполняет замену на основе регулярного выражения;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#urlencode&#34;&gt;@urlencode&lt;/a&gt; кодирует url в соответствии с RFC 3986;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#urldecode&#34;&gt;@urldecode&lt;/a&gt; декодирует url в соответствии с RFC 3986;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#htmlencode&#34;&gt;@htmlencode&lt;/a&gt; кодирует специальные символы в целевом узле в HTML сущности;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#htmldecode&#34;&gt;@htmldecode&lt;/a&gt; декодирует специальные символы в целевом узле в HTML сущности;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#background-to-image&#34;&gt;@background_to_image&lt;/a&gt; трансформирует целевой узел в &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; тэг с &lt;code&gt;src&lt;/code&gt; атрибуттом;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#json-to-xml&#34;&gt;@json_to_xml&lt;/a&gt; трансформирует json контент целевого узла в xml;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#html-to-dom&#34;&gt;@html_to_dom&lt;/a&gt; парсит html узел и вставляет его в документ (в документации есть очевидный пример);&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#combine&#34;&gt;@combine&lt;/a&gt; склеивает каждый следующий с предыдущим узлом, если такой существет;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#datetime&#34;&gt;@datetime&lt;/a&gt; трансформирует дату и время из строки в unix time;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#simplify&#34;&gt;@simplify&lt;/a&gt; системная функция для понимания того, как работает преобразование в Instant View;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#inline&#34;&gt;@inline&lt;/a&gt; встраивает iframe;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instantview.telegram.org/docs#unsupported&#34;&gt;@unsupported&lt;/a&gt; определяет, какие элементы не поддерживаются, для того чтобы не давать пользователю Instant View с неполным контентом.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--/email_off--&gt;
</description>
    </item>
    
    <item>
      <title>Программист? Сделай блог</title>
      <link>https://i-osipov.ru/post/do_the_blog/</link>
      <pubDate>Thu, 20 Jul 2017 00:19:26 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/do_the_blog/</guid>
      <description>&lt;p&gt;&lt;em&gt;Время чтения: 20 минут&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Всем привет!&lt;br /&gt;
Как и обещал, переношу свой пост из телеграм канала &lt;strong&gt;Джун уронил прод&lt;/strong&gt; &lt;a href=&#34;https://t.me/djuup&#34;&gt;@djuup&lt;/a&gt;.&lt;br /&gt;
Статья &lt;strong&gt;Программист? Сделай блог&lt;/strong&gt; выходила на канале в двух частях, здесь вы можете прочитать обе в одном целостном посте.
Приятного чтения!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;О чем этот пост&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Наполнение этого поста расскажет, как быстро и просто запустить собственный блог аналогичный этому, а если вы программист и шарите, то сделать это абсолютно бесплатно и красиво. Стоимость сделать такой блог колышется от 0 до 99 рублей в год и всё зависит от того захотите ли вы свой красивый домен. Я захотел.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Читайте дальше, если вы понимаете зачем вам блог и уже горите идеями, так ярко, что даже у черных дыр не хватило бы массы утянуть за собой столько света.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Здесь вы не найдете филосовствований о целевой аудитории и интересном контенте, а только техническая сторона, по делу, что и как сделать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Поехали&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Что такое блог в глазах программиста? Это какая-то информация в виде постов, которую нужно выбрасывать по первому требованию, так давайте выбрасывать его с энтузиазмом. Конечно, вы можете взять WordPress и в красивом интерфейсе накидать всё что хотите. Управлять контентом из админки и так далее, но готовы ли вы отдавать за возможность подключить кастомный домен по $3 в месяц, да еще и оплата ежегодная, т.е. вы сразу выкините $ 36 (2160 руб. при курсе 60 руб за $1). Это путь моей жены, но не мой.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/do_the_blog/gagarin.jpg&#34; alt=&#34;Gagarin&#34; title=&#34;Gagarin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К чёрту динамику&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Я убежден, что всё что нужно для суперского блога это html + css и немножко js. Какие PHP? Какая БД? Что за чушь! Момент, когда вы публикуете новый пост вполне детерминирован и на самом деле, всё что вам нужно, это сохранить страничку с вашим годным контентом, а затем отдать её при запросе определенного URL&amp;rsquo;a. Как это сделать? На помощь приходят генераторы статических страниц, такие как Hugo или Jekyll. В этом посте остановимся на hugo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/do_the_blog/hugo.png&#34; alt=&#34;Hugo&#34; title=&#34;Hugo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;Где этот мерзавец?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Для начала ставим себе Git, например, &lt;a href=&#34;https://git-scm.com/&#34;&gt;отсюда&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;Хочу блог. Красивый чтоб&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Примерно так и работает hugo. Наша цель на этом этапе сгенерировать себе блог для этого, по шагам:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Качаем Hugo&lt;/a&gt; в любую удобную директорию&lt;/li&gt;
&lt;li&gt;Добавляем к Path в переменных окружения bin папку в этой директории, например, C://hugo/bin. Теперь мы можем генерить где угодно и что угодно&lt;/li&gt;
&lt;li&gt;Открываем cmd или bash (что сподручнее) переходим в директорию, где появится папка с блогом. Находясь в этой директории прописываем:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;hugo new site your-blog-name
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Готово, блог сгенерён, но вы же хотите, чтобы красиво? По этому, переходим в папку с блогом, выбираем тему &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;здесь&lt;/a&gt; (пожалуй, самый сложный этап - это выбрать тему) и действуем в соответствии с указаниями в теме. Скорее всего они будут следующими: перейдите в папку themes и склонируйте туда гит репозиторий темы, возьмем, например, эту &lt;a href=&#34;https://github.com/beli3ver/hemingway2&#34;&gt;тему&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Склонировали? Возвращаемся в папку с блогом и открываем текстовым редактором файл &lt;strong&gt;config.toml&lt;/strong&gt;. В нём устанавливаем тему, например, так&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;theme = &amp;quot;hemingway2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Почти готово. Пишем в cmd/bash&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;hugo
hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Изи катка. Открываем &lt;em&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/em&gt; вот и наш блог.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Блог без постов как Нева без мостов&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Чтобы докинуть постов не обязательно выключать сервер. Просто открываете еще одну консоль/терминал и пишете&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/my-new-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Каждый пост - это Markdown файлик с дополнительными метаднными, этот файлик вы найдете в &lt;strong&gt;content/post&lt;/strong&gt;. Чтобы опубликовать пост нужно указать в метаданных внутри файла: &lt;strong&gt;draft = false&lt;/strong&gt;. Метаданные отделяются плюсами.&lt;/p&gt;

&lt;p&gt;Каждый новый пост - это новый файлик, благодаря которому обновляется статический контент.&lt;/p&gt;

&lt;p&gt;Нужно понимать, что предварительно сгенерированная статика это довольно быстро и абсолютно безопасно, т.к. у вас нет админки, которую можно взломать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;НА ПРОД!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Всё бы хорошо, только что с этим всем делать?&lt;/p&gt;

&lt;p&gt;После выполнения пустой команды &lt;strong&gt;hugo&lt;/strong&gt; каждый раз перегенерируется папка &lt;strong&gt;public&lt;/strong&gt;. Она-то нам и нужна. В этой папке лежит готовая статика блога. Но нужно куда-то это опубликовать. Здесь на помощь приходят github pages. Регистрируемся на github.com и создаем репозиторий, например, &lt;strong&gt;blog&lt;/strong&gt;. При создании репозитория github напишет как правильно отправить туда код. Что же нужно сделать в нашем случае? Перейти в папку &lt;strong&gt;public&lt;/strong&gt; и выполнить в ней:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add *
git commit -m &#39;init&#39;
git remote add origin https://github.com/&amp;lt;user-login&amp;gt;/&amp;lt;repo-name&amp;gt;.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Не забудьте поправить URL&amp;rsquo;ы. При любых изменениях в блоге вам нужно будет перекоммитить статику в гитхаб. Теперь открываем настройки репозитория (Settings) и смотрим что там есть. Находим раздел GitHub Pages. Указываем, что статика будет браться из master ветки и сохраняем.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вот и всё&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub на месте скажет ваш URL, это будет что-то вроде &lt;a href=&#34;https://ivan-osipov.github.com/blog&#34;&gt;https://ivan-osipov.github.com/blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как свистульки прикрутить?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo - довольно гибкий инструмент и с его помощью можно провернуть много чего интересного не рассмотренного в этой статье. Ответы на большинство вопросов дает &lt;a href=&#34;https://gohugo.io/getting-started/&#34;&gt;документация Hugo&lt;/a&gt;. Отнеситесь внимательно и к документации темы, она поможет вам лучшим способом сконфигурировать и настроить ваш блог.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Прикрепление пользовательского домена&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Чтобы получить домен его придется купить. Наиболее дешевый вариант, который я нашел, это &lt;a href=&#34;https://2domains.ru&#34;&gt;https://2domains.ru&lt;/a&gt;. Там я приобрел домен i-osipov.ru на год всего за 99 рублей, сейчас, как я вижу, стоимость доменов в зоне ru у этого провайдера  149 рублей, при желании вы можете поискать что-то по-дешевле.&lt;/p&gt;

&lt;p&gt;Итак, домен в кармане и что же теперь с ним делать?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudflare.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Зачем нам этот сайт? Всё просто, фактически это своего рода панель управления прокси к нашему блогу. Настроить там можно многое множество вещей, но об этом в отдельной статье. Выполним следующую последовательность действий:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;регистрируемся на cloudflare.com;&lt;/li&gt;
&lt;li&gt;справа сверху нажмите на кнопку &amp;ldquo;+Add Site&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;в форму вписываем ваш домен и нажимаем Begin Scan. Недолго ждем, тем временем cloudflare загружает всю доступную информацию по нашему домену;
нажимаем Continue;&lt;/li&gt;
&lt;li&gt;cloudflare спросит нас о плане, который мы хотим использовать и здесь можно выбрать Free Website;&lt;/li&gt;
&lt;li&gt;следующим шагом от нас потребуется поменять DNS сервера для ранее купленного домена. Например, для сайта &lt;strong&gt;yandex.com&lt;/strong&gt; cloudflare требует сделать следующие изменения:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/do_the_blog/dns.png&#34; alt=&#34;DNS&#34; title=&#34;DNS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Изменение DNS серверов на 2domain.ru&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Чтобы изменить DNS сервера необходимо зайти в личный кабинет. В меню &lt;strong&gt;Домены -&amp;gt; Мои домены&lt;/strong&gt; выбрать указанный на cloudflate домен. Открыть раздел &amp;ldquo;Управление ДНС-серверами/Делегирование&amp;rdquo; и тут нужно сменить используемые dns сервера для домена. Давайте заменим записи &lt;em&gt;ДНС 1&lt;/em&gt; и &lt;em&gt;ДНС 2&lt;/em&gt; на &lt;strong&gt;elliot.ns.cloudflare.com&lt;/strong&gt; и &lt;strong&gt;jasmine.ns.cloudflare.com&lt;/strong&gt; соответственно. Выглядит это примерно так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/do_the_blog/dns_update.png&#34; alt=&#34;DNS_UPDATE&#34; title=&#34;DNS Update&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Для понимания, теперь IP будет определяться благодаря этим DNS серверам. DNS сервера принадлежат Coudflare.com.&lt;/p&gt;

&lt;p&gt;Ваш сайт или блог будет активирован в течении 24 часов, также в течении этого времени будет создан сертификат для подержки https. Но пока нам нужно хотя бы связать домен с GitHub Pages. Давайте это сделаем.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Прикрепляем к GitHub Pages свой домен&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Сделать это очень просто заходим в репозиторий где лежит статика, открываем Settings. В разделе GitHub Pages под Custom Domain вписываем свой домен и жмем Save. Отлично! Страничку с GitHub можно на сегодня закрыть.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Прописываем матчинг записей DNS на сервера GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Пример записей, которые вам нужно сделать в CloudFlare ниже. Естественно, каждое использование &lt;em&gt;i-osipov.ru&lt;/em&gt; следует заменить на свой домен.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/do_the_blog/domain.png&#34; alt=&#34;DOMAIN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Как вы видите в двух верхних строках указывается 2 разных IP адреса. Это специальные адреса GitHub, при желании вы можете проверить их &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DNS изменения обновляются около суток, в моем случае несколько часов.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Что мы имеем на этом этапе?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;При входе на &lt;a href=&#34;http://your-domain.com&#34;&gt;http://your-domain.com&lt;/a&gt; ваша статика созданная ранее отдается поситителю. Первая и самая трудная часть плана выполнена. Теперь давайте настроим https. Https основывается на сертификатах, сертификаты бывают разных видов, но нас - любителей бесплатных сертификатов это не должно интересовать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Если кратко, то https для блога вам нужен только для красоты.&lt;/p&gt;

&lt;p&gt;Что такое HTTPS? Это расширенная версия протокола HTTP, которая шифрует транспортируемые данные между клиентом и сервером (в нашем случае) и если в вашем блоге есть форма обратной связи или любые другие данные пользователя, то сделать https имеет смысл.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Какой профит для блога?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Психология. Так исторически сложилось, что зеленый цвет - цвет доверия и когда пользователь заходит на ваш сайт/блог и видит зеленый замочек, то кредит доверия к вашему ресурсу увеличивается, хотя программистов обычно так не на дурить.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Вернемся к cloudflare. Перейдем в раздел crypto и первой строчкой мы увидим SSL, здесь нужно поставить значение FULL и пояснить: как вы видите, есть 4 возможных варианта: off, flexible, full и full(strict).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;off - ни один пользователь не увидит ваш сайт через https.&lt;/li&gt;
&lt;li&gt;flexible SSL - на вашем сервере нет https, даже с сертификатом, который не подходит для вашего сайта. CloudFlare будет делать https соединение с пользователями, но обмениваться информацией с вашим сервером по http.&lt;/li&gt;
&lt;li&gt;full SSL - ваш сервер поддерживает https (GitHub поддерживает), но установленый сертификат  не соответствует вашему домену (так и есть, ведь сертификат выдан на *.github.com). В этом случае CloudFlare не будет проверять соответствие домена сертификату.&lt;/li&gt;
&lt;li&gt;full SSL (strict) - ваш сервер имеет корректный сертификат (не истекший и подписанный Cloudflare Origin CA или доверенным CA).
Напомню, что наш вариант - full SSL. Обновление сертификата может занять около 24 часов.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Дополнительно в этом меню можно включить постоянное перенаправление http на https.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Кешируй, что можешь, пока молодой&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Финальный шаг нашего создания хорошего блога программиста - настроить кеш. Скорее всего, настройки по умолчанию вас удовлетворят, но возможно что-то захочется поменять. Перейдем к разделу Caching. Первое, что вы увидите в этом разделе - это возможность очистить кеш. И в случае с блогом, если посты не частые, то чистку можно делать сразу после поста. На этом экране могут пригодиться как настройки кеширования, так и, например, Development Mode, который позволяет прокидывать изменения в режиме реального времени.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Похоже на финал&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Если вы читаете эти строки, значит вы очень любите читать, либо вы прошли большой, но интересный путь создания и запуска собственного блога. Эту статью я писал, опираясь на собственный опыт при создании &lt;a href=&#34;https://i-osipov.ru&#34;&gt;https://i-osipov.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Статья перенесена из telegram канала &lt;strong&gt;Джун уронил прод&lt;/strong&gt; &lt;a href=&#34;https://t.me/djuup&#34;&gt;@djuup&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>