<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinking on Ivan Osipov</title>
    <link>https://i-osipov.ru/categories/thinking/index.xml</link>
    <description>Recent content in Thinking on Ivan Osipov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <atom:link href="https://i-osipov.ru/categories/thinking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Сделай OAuth2 - забудь о логинах и паролях</title>
      <link>https://i-osipov.ru/post/do-oauth2-forget-login-password/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-osipov.ru/post/do-oauth2-forget-login-password/</guid>
      <description>&lt;p&gt;Шёл 2018 год, а люди продолжали вводить логины и пароли, снова логины и пароли, опять логины и пароли. Тебе не кажется это странным? Почему огромное количество сервисов всё еще просит своих пользователей залогиниться? Давай разберемся в этом вопросе.&lt;/p&gt;

&lt;p&gt;Мы живем в век инноваций и автоматизируем каждый чих человеческой деятельности, но что касается интернета, то тут я теряюсь в догадках. Почему очередной интернет магазин книг просит у меня логин и пароль? Почему я должен &amp;ldquo;по умолчанию&amp;rdquo; пройти регистрацию? Почему мне не дают в качестве пути по умолчанию OAuth2 от, например, Google? Всё это сбивает с толку, кажется, что очередной сайт хочет сохранить мой пароль (а самые продвинутые хотят сохранить только хеш от него), чтобы при первой хакерской атаке всё утекло в интернеты.&lt;/p&gt;

&lt;p&gt;Пароли это, пожалуй, одна из самых уязвимых частей секретной жизни человека в интернете. Как часто вы используете один и тот же пароль для разных ресурсов? Хотя бы раз вы повторялись? Как часто ваши пароли похожи на столько, что узнав один, путем недолгого перебора можно получить другой? Самые продвинутые из нас используют сервисы типа LastPass, которые хранят ваши рандомные пароли для разных ресурсов, но кажется, что таких людей не много, да и сам факт потребности в подобных сервисах заставляет задуматься.&lt;/p&gt;

&lt;p&gt;Сколько сложностей связано с регистрацией? Обычно, нужно получить email, в котором надо нажать на ссылку. А если почта на смартфоне, то порой нужно начала нажать на кнопку в телефоне, затем логиниться с ноутбука, в общем всякие реализации бывают. Да и пять сотен раз я уже подтверждал всем вокруг, что это мой email.&lt;/p&gt;

&lt;p&gt;А эти логины? Вы пробовали подобрать хороший логин для твиттера? Если только у вас редкая комбинация имени и фамилии или супер-уникальный никнейм, то всё пройдет без проблем, но это же исключения! Идея логина в том, чтобы составить пару паролю, дать дефолтное имя и позволить пользователю представить себя, но как мне представить себя, если я не помню свой логин, потому что мой стандартный был занят кем-то, а тот, что я придумал специально для этого сервиса, я уже забыл? Как мне понять при повторном логине, что именно на этом сервисе я задействовал все свои силы на подбор уникального логина?&lt;/p&gt;

&lt;p&gt;Похоже, что почта в качестве идентификатора пользователя это хорошо, но как я озвучил выше, почту нужно подтверждать, а еще их можно зарегистрировать несколько и получить много разных аккаунтов, в результате по ошибке путаться, каким из них пользоваться. Или, что если вам нужно что-то большее, например, гарантия, что это не просто &amp;ldquo;уникальный интернет пользователь&amp;rdquo;, но и в реальном мире уникальный человек? Очевидно, сегодня технически этого трудно достигнуть, инструменты есть, но эти случаи особые и к ним этот текст не имеет отношения. Квазиуникальность через номер телефона должна быть достаточна в большинстве случаев. Представляете как усложнится жизнь пользователя, если вы его и номер телефона спросите?&lt;/p&gt;

&lt;p&gt;В общем, вопросов много, давайте поищем ответ.&lt;/p&gt;

&lt;p&gt;Во всех мыслимых и немыслимых случаях я не вижу необходимости в логине, это какая-то опциональная штука от которой можно смело отказываться, например, в телеграме вы можете иметь аккаунт, но вам не обязательно иметь логин для него, например, вы можете отказаться от логина и вас по нему нельзя будет найти.&lt;/p&gt;

&lt;p&gt;Сначала, я хотел перечислить несколько интересных схем аутентификации, но потом решил, что до них можно и самим легко дойти, да и это хорошее практическое упражнение на развитие фантазии.&lt;/p&gt;

&lt;p&gt;OAuth2 решает наши проблемы. Я не буду вдаваться здесь в детали, но высокоуровнево это выглядит так: пользователь хочет войти, затем его редиректит на identity provider (например, на гугл), где он скорее всего уже залогинен, но если нет, то вводит там свои логин и пароль и подтверждает, что этому приложению можно дать доступ к данным этого пользователя. После этого его редиректит назад с кодом, который отправляется клиентом на бекенд, а бекенд обменивает код на токен и с помощью токена запрашивает данные по пользователю. Алгоритм довольно простой в реализации, со своими нюансами, но о них в другой статье, и самое главное, что в 99% случаев аутентификация сводится к нажатию на одну-две кнопки. Более того, в зависимости от identity provider ты можешь получить много разных полезных данных для твоего конкретного случая и твоего конкретного приложения, например, Google в списке информации о пользователе при указании определенного scope ты можешь получить номер телефона пользователя и сформировать таким образом квазиуникальных пользователей, или же получить полный список email этого пользователя, чтобы он мог заходить под любым из них.&lt;/p&gt;

&lt;p&gt;Identity provider хранит информацию защищёно и не даст пользователю просто так упустить свой аккаунт в чужие руки, часто поддерживается двух факторная аутентификация.&lt;/p&gt;

&lt;p&gt;А что с корпоративными системами? В случае Google, если вы работаете с G Suite, то это совсем идеальное решение, если же вы не завязаны на какой облачный офис, то вы всегда можете поднять один корпоративный OAuth сервер и ходить на него из ваших приложений для аутентификации. В любом случае, это куда удобнее, чем вводить по миллиону раз учетные данные. Хорошо, что современные браузеры уже автоматизировали процесс хранения учетных данных и использования последних, когда вам это необходимо, потому что человечество по неведомой причине не спешит отказаться от логина и пароля.&lt;/p&gt;

&lt;p&gt;Получается, если есть инструмент - OAuth2, который в пару кликов способен сделать счастливыми и пользователя, и бизнес, то почему бы им не заменить устаревший, неудобный, менее безопасный способ использования логинов и паролей?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>REST is not RPC</title>
      <link>https://i-osipov.ru/post/rest-is-not-rpc/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-osipov.ru/post/rest-is-not-rpc/</guid>
      <description>&lt;p&gt;Тебе не приелось слово REST? Нет, я не говорю об отдыхе, я говорю про тот самый архитектурный стиль.
Пожалуй, слишком часто я слышу о том, что у тех REST API, у этих REST API, а потом, оказывается что всё не так просто.
Здесь пойдет речь о том какой смысл в этой аббревиатуре и что в неё вкладывают все вокруг, мы вспомним идеи и посмотрим как их реализуют.&lt;/p&gt;

&lt;p&gt;Индустрия парализована. Парализована банально не правильным пониманием концепции и эхолалией. Одна хорошая идея в неправильной трактовке может принести много вреда. Всё было довольно просто, хотелось оформить всё единообразно, а получилось&amp;hellip; безобразно! Удивительно, как крайне компетентные, уважаемые люди и те попадают под власть красивых сокращений.&lt;/p&gt;

&lt;p&gt;Часто ли тебе говорили, &amp;ldquo;посмотри на REST API сервиса Х&amp;rdquo; или &amp;ldquo;у нас реализовано REST API&amp;rdquo;, ты приходил и видел, что на самом деле никакого REST API нет и в помине, обычный HTTP API, хаотичным образом разбросанные HTTP глаголы в купе с уродливыми URL. Со мной такое случалось последние несколько лет и если раньше я не особо обращал внимание на это, то спустя время ошибочная трактовка REST начала бросаться в глаза. Позволь объяснить, что я понимаю под &amp;ldquo;правильным&amp;rdquo; пониманием REST. С одной стороны, можно трактовать REST по Филдингу. Тогда, мы обязаны обеспечить следующие условия:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Клиент-серверная модель взаимодействия;&lt;/li&gt;
&lt;li&gt;Stateless;&lt;/li&gt;
&lt;li&gt;Кеширование;&lt;/li&gt;
&lt;li&gt;Единообразие интерфейса;&lt;/li&gt;
&lt;li&gt;Слоистая архитектура со стороны сервера;&lt;/li&gt;
&lt;li&gt;Код по требованию, расширяющий функциональность клиента.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Хм, многовато сложности, давай упростим и предположим, что когда говорят о REST API, то в идеале имеют ввиду соблюдение условия &amp;ldquo;4 Единообразие интерфейса&amp;rdquo;. Кстати, окинь взглядом этот список еще раз и подумай, как близко твоя система, которую ты в данный момент разрабатываешь. Я могу честно отметить, что ни в одной системе мне не приходилось реализовывать пункт 6, хотя возможно под него подойдет загрузка JS из CDN,  тогда всё в порядке.&lt;/p&gt;

&lt;p&gt;Можно выделить несколько важных пунктов о единообразии интерфейса, т.е. о создании REST API:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Явно выделенные ресурсы (например, пользователь). Метод HTTP API, который называется &amp;ldquo;/createUser&amp;rdquo; очевидно нельзя называть частью REST API - это отличный пример реализации RPC поверх HTTP. Думая о пользователях, как о ресурсах мы получаем uri, который заканчивается на &amp;ldquo;/users&amp;rdquo;. Обрати внимание, &amp;ldquo;users&amp;rdquo; это множественное число. Из собственной практики могу заключить, что такой вариант воспринимается лучше, это выглядит более естественным при запросе множества пользователей. К сожалению, не во всех проектах мне удается этому следовать, но помни, главное - единообразие. Если в большей части системы для получения множества ресурсов уже используется единственное число, лучше так и оставить - меньше будет ошибок у пользователей твоего API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTTP глаголы это не просто глаголы. Во первых, REST это не обязательно про HTTP. Вот так, теперь живи с этим. Суть HTTP глаголов в REST - помочь тебе манипулировать ресурсами через их представления. Кроме очевидной логики в названиях HTTP глаголов POST, PUT. DELETE, GET, есть один важный момент который мы часто упускаем. Имя его - &lt;strong&gt;идемпотентность&lt;/strong&gt;. Тебя когда-нибудь спрашивали на собеседовании &amp;ldquo;почему для update используют глагол PUT&amp;rdquo;? Обычно, я в таких ситуациях отвечал &amp;ldquo;ну, логично же&amp;rdquo; и с этим никто не спорил, хотя есть и другое объяснение. Основное различие между PUT и POST это идемпотентность. Это обозначает, что PUT, как идемпотентный метод, можно запустить многократно с одинаковым результатом, а вот POST нельзя. Предположим, что у вас есть реализация &amp;ldquo;POST /users&amp;rdquo; и &amp;ldquo;PUT /users&amp;rdquo;, естественно, в теле запроса находится user. Если запустить первый метод 20 раз, то будет создано 20 пользователей (при условии отсутствия уникальных индексов), а если запустить 20 раз второй запрос, то результирующее состояние будет тем же, что и при первом вызове. Идемпотентность это важное свойство, которое следует соблюдать для избежания несогласованой трактовки работы твоего API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Гипермедиа. Пункт, который на моей практике не так часто соблюдают, возможно из-за отсутствия единого стандарта, но скорее из-за лени и нежелания это поддерживать. Сама по себе концепция проста, действия определяются на сервере, т.е. ссылки которые могут повлиять на состояние системы. Кроме простых точек входа в систему могут быть и более сложные действия, которые необходимо определять. Однако, складывается впечатление, что это несколько вырожденный пункт, который сегодня перекрывается возможностями автоматически генерируемой документации.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Content-Type &amp;amp; Accept заголовки помогают понять как же именно обрабатывать запрос, что находится в его теле и какой формат ожидается в ответ. Когда у вас один веб клиент, этот пункт кажется излишним, но на практике, это хорошее ребро жесткости для API, которое позволяет получать именно то, что ожидается в ответ.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Итак, мы разобрались, что RESTful системы делает вовсе не каждый. Достаточно завести базу в которой ты будешь хранить состояние сессии и всё, по условию Stateless ты уже не проходишь. Окей, но что нам стоит построить хотя бы RESTful API? Дисциплина помогает писать в REST стиле конечные точки: правильные url, корректное использование глаголов и даже заголовки приведены в порядок. Осталось гипермедиа&amp;hellip; Один шаг и у нас по настоящему RESTful API. Что-то внутри мне подсказывает, что это непреодолимый в общем случае шаг, что это достаточно много трудозатрат ради минимального выхлопа, при том, что закрыть проблему, которую закрывает hypermedia можно и с помощью swagger, не так гибко, но всё же.&lt;/p&gt;

&lt;p&gt;В сухом остатке, по моему субъективному опыту мало кто пишет настоящий REST API, однако, мы можем довольно просто приблизиться к нему. Но зачем обманывать себя? Почему недостаточно сказать &amp;ldquo;посмотри на сервис Х у них HTTP API&amp;rdquo; или &amp;ldquo;у нас HTTP API&amp;rdquo;? Видимо, люди надеятся спрятать за словом, которое должно характеризовать надежные, производительные и масштабируемые системы, то, что они делают. Получается, даже приведение интерфейса к единообразному виду делает далеко не каждый, зато мы спешим повесить лейбл &amp;ldquo;RESTful&amp;rdquo; на свой RPC.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Проектные пожары - время расти</title>
      <link>https://i-osipov.ru/post/time-to-growth/</link>
      <pubDate>Sat, 23 Jun 2018 09:34:54 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/time-to-growth/</guid>
      <description>

&lt;p&gt;Порой на наших проектах происходят ситуации, когда именно от тебя всё зависит, множество срочных к исправлению проблем. Ты тот единственный человек, который сейчас может помочь, тебе не на кого оставить проблему и других более опытных технических специалистов, которые разбираются в проекте, больше нет. Я называю такие моменты &amp;ldquo;пожар&amp;rdquo;. Давай взглянем на эту ситуацию и подумаем, что же мы из неё можем извлечь и почему страх безоснователен.&lt;/p&gt;

&lt;h2 id=&#34;почему-это-произошло&#34;&gt;Почему это произошло?&lt;/h2&gt;

&lt;p&gt;Для начала разберемся в причинах. Почему на проектах происходят пожары, которые нужно тушить, срочно, именно тебе? Интуитивно кажется, что источник этой проблемы - менеджмент, однако, это далеко не всегда так. Представим, что вас двое-трое разработчиков на проекте и те, другие, собрались в отпуск или в командировку по параллельному проекту. Остался только ты. С точки зрения менеджера - всё в порядке, всегда есть разработчик, который может исправить критическую проблему заказчика. С другой стороны, обычно, если система довольно крупная, то ты знаешь только свою часть и еще немножко, а в тот момент, когда начинают сыпаться ошибки из модуля, которым ты раньше не занимался, то появляется некоторого рода страх, о котором мы немного поговорим.&lt;/p&gt;

&lt;h2 id=&#34;безосновательная-природа-страха&#34;&gt;Безосновательная природа страха&lt;/h2&gt;

&lt;p&gt;Начинать что-то новое всегда больно, а исправлять чужой код в непокрытой тестами части системы всегда страшно.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Конечно, здесь исходная проблема в отсутствии обильного авто тестирования, однако, если ты работал в аутсорсинге, то ты меня поймешь, нам далеко не всегда дают достаточно времени на покрытие системы тестами, здесь есть тонкая грань между миром разработки и миром бизнеса.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Почему возникает страх? В первую очередь от отсутствия знания того или иного модуля, того или иного кода. Вспомни, когда к тебе прилетал тикет в котором написано, например, следующее: &lt;em&gt;Метод Х модуля А бросает IllegalStateException&amp;hellip;&lt;/em&gt;. Какие чувства вызывают подобные тикеты, если ты создатель этого метода и вообще обладаешь абсолютно полными знаниями о модуле А? По моим ощущениям, такие проблемы вызывают скорее легкое раздражение: &lt;em&gt;Как же так, я что-то упустил&amp;hellip;&lt;/em&gt;, чем страх. А что с ситуацией где всё тот же самый тикет, но ты впервые в глаза видишь &lt;em&gt;модуль А&lt;/em&gt;? Возникает страх или своего рода волнение, из подсознательного выскакивает мысль: &lt;em&gt;А смогу ли я это исправить?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;С опытом приходит понимание, что можно исправить всё, страх пропадает, но как же так происходит? Дело в том, что причин для страха на самом деле нет и постепенно осознаем. В чем исходная причина страха? В незнании! Мы понятия не имеем с чем имеем дело. Хотя как только мы устраним незнание, станем владельцами функции, разберемся в её работе, то страх и волнение сами по себе уйдут. Здесь нам поможет иерархический нисходящий подход.&lt;/p&gt;

&lt;h2 id=&#34;иерархический-нисходящий-подход&#34;&gt;Иерархический нисходящий подход&lt;/h2&gt;

&lt;p&gt;Сначала, узнайте, что это за модуль, в котором возникла проблема, обозначьте его основные ответственности. Затем, разберитесь кто инициировал вызов, какая глобальная задача модуля выполняется, и постепенно опускайтесь вглубь до самой функции, которая бросает ошибку. Довольно очевидно, не так ли? Однако, на мой взгляд, только этот подход может дать эффективные плоды в изучении чужого кода. После того, как мы идеологически разобрались с частью в которой падают ошибки наступает время для её решения. Я сформировал для себя эвристическое правило, которое назвал &amp;ldquo;Полуторачасовой Proof of Concept&amp;rdquo;, о нём я расскажу в отдельной статье, чтобы не пропустить, &lt;a href=&#34;https://i-osipov.ru/subscribe/&#34; target=&#34;_blank&#34;&gt;подписывайтесь на рассылку&lt;/a&gt; или присоединяйтесь к &lt;a href=&#34;https://i-osipov.ru/telegram&#34; target=&#34;_blank&#34;&gt;Telegram каналу&lt;/a&gt;. Борьба со страхом неизвестных ошибок, исправление их - это первый шаг по лестнице вверх в направлении собственного роста. Как бы нам извлечь максимум пользы из текущего состояния дел? Именно об этом мы и поговорим дальше.&lt;/p&gt;

&lt;h2 id=&#34;time-to-growth&#34;&gt;Time to growth&lt;/h2&gt;

&lt;p&gt;Когда горят пожары на проекте, когда всё зависит от тебя, твое время сильно ограничено и нужно выдавать N тысяч фиксов в минуту, тут то и активизируются все навыки к освоению чего-то нового. Лучший прогресс процесса обучения заметен в той области, где вы уже немного разобрались, но пока недостаточно, дельта прироста максимальна. Это можно описать широко известной кривой обучения, которая представлена на картинке ниже.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/time-to-growth/learning-curve.jpeg&#34; alt=&#34;Learning Curve&#34; title=&#34;Кривая обучения&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Я приведу пример из практики. На одном из проектов во время его выхода на UAT (User Acceptance Testing) я остался единственным разработчиком, приложение активно тестировалось и на этом этапе нужно было справиться с серией интересных задач. Я давно хотел поработать с инфраструктурой амазона, мне повезло, наше приложение развернули у них, но не успели сделать нормальное Continuous Delivery, по этому все обновления нужно было делать вручную. Вход на сервер был доступен только через bastion server, это такой прокси в инфраструктуре амазона, который является единой точкой входа в вашу подсеть. Доступ только по ssh. Должно быть довольно очевидно из картинки ниже.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/time-to-growth/bastion.png&#34; alt=&#34;Bastion&#34; title=&#34;Bastion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Представь, какое &amp;ldquo;удовольствие&amp;rdquo; ты получаешь, когда делаешь последовательное открытие ssh соединений, сначала до bastion сервера, потом до веб сервера, при этом нужно использовать правильные pem ключи и ничего не забыть. Это изматывает, хочется найти более простые пути. Тут-то и произошёл очередной скачек, когда я узнал про .ssh/config - файл конфигурации для OpenSSH в котором ты можешь описать довольно сложные соединения, указать bastion как прокси и всё это свернуть под один HostName. В итоге, открытие ssh соединение до web server&amp;rsquo;a превращается в одну команду &lt;code&gt;ssh web_server_alias&lt;/code&gt;. Особенно круто, что ты можешь, например, копировать файлы с помощью &lt;code&gt;scp&lt;/code&gt; на удалённый сервер всё так же просто, более того автодополнение в терминале поможет тебе найти правильную папку на удаленном сервере, при том, что ты явным образом никакого ssh не открывал. Конечно, раньше мне иногда приходилось пользоваться ssh, но сам факт того, что это можно сделать на столько просто - открыл для меня следующий уровень владения этим инструментом и производными от него.&lt;/p&gt;

&lt;p&gt;Другой пример, это логирование, когда приложения попадают к пользователю очень часто что-то идет не так. Например, background worker, поток, который запускается с частотой раз в 10 секунд начинает забрасывать лог тоннами эксепшенов из одного специализированного модуля, благодаря чему размер лог файла очень быстро стремится в бесконечность при этом забивая этим шумомом ни в чем неповинный общий лог файл (сейчас я говорю об обычном монолите). Первое, что приходит на ум, нужно срочно бежать и фиксить. Здесь главное остановиться на пару секунд и подумать: &amp;ldquo;А могу ли я замедлить разгорающийся пожар?&amp;rdquo;. Вовсе остановить запускающийся процесс - нельзя, а вот замедлить, например, до частоты запуска раз в минуту - можно. Таким образом, пожар превращается в нечто меньшее, лог файл растет в шесть раз медленнее, значит, что достигнуть того огромного размера в который он превратился за один день он сможет только за неделю, не плохо, теперь можно собраться с мыслями и спокойно делать фикс.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Подобные идеи, ассоциируются у меня с книгой Д. Трампа &amp;ldquo;Искусство заключать сделки&amp;rdquo;. Автор рассказывает о том, что когда он строил свою Trump Tower в Нью-Йорке ему никак не удавалось выкупить территорию, достаточную по регламенту для построения небоскреба, хозяева этой территории отказывались её продавать. Тогда автор нашёл обходной путь, он арендовал землю на 99 лет. Мораль - если что-то нужно прямо сейчас, но это недостижимо, ищите дополнительные обходные пути для быстрого временного решения.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Если в обычной жизни вам не часто нужно настраивать лог файл, то здесь появляется острая потребность в этом разобраться. Например, вы хотите отслеживать запросы во внешнее API, они не доходят до этого API или некоторые из них невалидные, их происходит много и смешивать такие логи с общим потоком - не правильно. Мы всегда можем выделить специальный файл для определенного API, настроить для него логгер и аппендер (в терминах logback), настроить процесс ежедневного архивирования таких файлов и вуаля, оно работает. Вся интересная вам информация в одном месте, без лишнего шума. Таким образом, если вы имели минимальное представление как этого достичь, но не знали деталей, то кривая роста делает своё дело.&lt;/p&gt;

&lt;h2 id=&#34;разгребая-угли&#34;&gt;Разгребая угли&lt;/h2&gt;

&lt;p&gt;В какой-то момент пожары заканчиваются, они либо становятся маленькими и локальными, либо оказываются полностью потушенными, что тоже имеет место. Такие ситуации помогают нам приобрести навыки необходимые для выживания, вырасти и почувствовать настоящий вкус профессии программиста. Где-то я прочитал, что музыка способствует поиску множества решений одной проблемы, стимулирует разнообразие вариантов, это может действительно помочь в трудных ситуациях. Пожары закаляют и показывают вам на что вы способны, я не призываю вас их разжигать, но если уже разгорелось, то это отличная возможность для роста.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>