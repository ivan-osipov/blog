<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinking on Ivan Osipov</title>
    <link>https://i-osipov.ru/categories/thinking/index.xml</link>
    <description>Recent content in Thinking on Ivan Osipov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <atom:link href="https://i-osipov.ru/categories/thinking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Проектные пожары - время расти</title>
      <link>https://i-osipov.ru/post/time-to-growth/</link>
      <pubDate>Sat, 23 Jun 2018 09:34:54 +0400</pubDate>
      
      <guid>https://i-osipov.ru/post/time-to-growth/</guid>
      <description>

&lt;p&gt;Порой на наших проектах происходят ситуации, когда именно от тебя всё зависит, множество срочных к исправлению проблем. Ты тот единственный человек, который сейчас может помочь, тебе не на кого оставить проблему и других более опытных технических специалистов, которые разбираются в проекте, больше нет. Я называю такие моменты &amp;ldquo;пожар&amp;rdquo;. Давай взглянем на эту ситуацию и подумаем, что же мы из неё можем извлечь и почему страх безоснователен.&lt;/p&gt;

&lt;h2 id=&#34;почему-это-произошло&#34;&gt;Почему это произошло?&lt;/h2&gt;

&lt;p&gt;Для начала разберемся в причинах. Почему на проектах происходят пожары, которые нужно тушить, срочно, именно тебе? Интуитивно кажется, что источник этой проблемы - менеджмент, однако, это далеко не всегда так. Представим, что вас двое-трое разработчиков на проекте и те, другие, собрались в отпуск или в командировку по параллельному проекту. Остался только ты. С точки зрения менеджера - всё в порядке, всегда есть разработчик, который может исправить критическую проблему заказчика. С другой стороны, обычно, если система довольно крупная, то ты знаешь только свою часть и еще немножко, а в тот момент, когда начинают сыпаться ошибки из модуля, которым ты раньше не занимался, то появляется некоторого рода страх, о котором мы немного поговорим.&lt;/p&gt;

&lt;h2 id=&#34;безосновательная-природа-страха&#34;&gt;Безосновательная природа страха&lt;/h2&gt;

&lt;p&gt;Начинать что-то новое всегда больно, а исправлять чужой код в непокрытой тестами части системы всегда страшно.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Конечно, здесь исходная проблема в отсутствии обильного авто тестирования, однако, если ты работал в аутсорсинге, то ты меня поймешь, нам далеко не всегда дают достаточно времени на покрытие системы тестами, здесь есть тонкая грань между миром разработки и миром бизнеса.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Почему возникает страх? В первую очередь от отсутствия знания того или иного модуля, того или иного кода. Вспомни, когда к тебе прилетал тикет в котором написано, например, следующее: &lt;em&gt;Метод Х модуля А бросает IllegalStateException&amp;hellip;&lt;/em&gt;. Какие чувства вызывают подобные тикеты, если ты создатель этого метода и вообще обладаешь абсолютно полными знаниями о модуле А? По моим ощущениям, такие проблемы вызывают скорее легкое раздражение: &lt;em&gt;Как же так, я что-то упустил&amp;hellip;&lt;/em&gt;, чем страх. А что с ситуацией где всё тот же самый тикет, но ты впервые в глаза видишь &lt;em&gt;модуль А&lt;/em&gt;? Возникает страх или своего рода волнение, из подсознательного выскакивает мысль: &lt;em&gt;А смогу ли я это исправить?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;С опытом приходит понимание, что можно исправить всё, страх пропадает, но как же так происходит? Дело в том, что причин для страха на самом деле нет и постепенно осознаем. В чем исходная причина страха? В незнании! Мы понятия не имеем с чем имеем дело. Хотя как только мы устраним незнание, станем владельцами функции, разберемся в её работе, то страх и волнение сами по себе уйдут. Здесь нам поможет иерархический нисходящий подход.&lt;/p&gt;

&lt;h2 id=&#34;иерархический-нисходящий-подход&#34;&gt;Иерархический нисходящий подход&lt;/h2&gt;

&lt;p&gt;Сначала, узнайте, что это за модуль, в котором возникла проблема, обозначьте его основные ответственности. Затем, разберитесь кто инициировал вызов, какая глобальная задача модуля выполняется, и постепенно опускайтесь вглубь до самой функции, которая бросает ошибку. Довольно очевидно, не так ли? Однако, на мой взгляд, только этот подход может дать эффективные плоды в изучении чужого кода. После того, как мы идеологически разобрались с частью в которой падают ошибки наступает время для её решения. Я сформировал для себя эвристическое правило, которое назвал &amp;ldquo;Полуторачасовой Proof of Concept&amp;rdquo;, о нём я расскажу в отдельной статье, чтобы не пропустить, &lt;a href=&#34;https://i-osipov.ru/subscribe/&#34; target=&#34;_blank&#34;&gt;подписывайтесь на рассылку&lt;/a&gt; или присоединяйтесь к &lt;a href=&#34;https://i-osipov.ru/telegram&#34; target=&#34;_blank&#34;&gt;Telegram каналу&lt;/a&gt;. Борьба со страхом неизвестных ошибок, исправление их - это первый шаг по лестнице вверх в направлении собственного роста. Как бы нам извлечь максимум пользы из текущего состояния дел? Именно об этом мы и поговорим дальше.&lt;/p&gt;

&lt;h2 id=&#34;time-to-growth&#34;&gt;Time to growth&lt;/h2&gt;

&lt;p&gt;Когда горят пожары на проекте, когда всё зависит от тебя, твое время сильно ограничено и нужно выдавать N тысяч фиксов в минуту, тут то и активизируются все навыки к освоению чего-то нового. Лучший прогресс процесса обучения заметен в той области, где вы уже немного разобрались, но пока недостаточно, дельта прироста максимальна. Это можно описать широко известной кривой обучения, которая представлена на картинке ниже.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/time-to-growth/learning-curve.jpeg&#34; alt=&#34;Learning Curve&#34; title=&#34;Кривая обучения&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Я приведу пример из практики. На одном из проектов во время его выхода на UAT (User Acceptance Testing) я остался единственным разработчиком, приложение активно тестировалось и на этом этапе нужно было справиться с серией интересных задач. Я давно хотел поработать с инфраструктурой амазона, мне повезло, наше приложение развернули у них, но не успели сделать нормальное Continuous Delivery, по этому все обновления нужно было делать вручную. Вход на сервер был доступен только через bastion server, это такой прокси в инфраструктуре амазона, который является единой точкой входа в вашу подсеть. Доступ только по ssh. Должно быть довольно очевидно из картинки ниже.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/time-to-growth/bastion.png&#34; alt=&#34;Bastion&#34; title=&#34;Bastion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Представь, какое &amp;ldquo;удовольствие&amp;rdquo; ты получаешь, когда делаешь последовательное открытие ssh соединений, сначала до bastion сервера, потом до веб сервера, при этом нужно использовать правильные pem ключи и ничего не забыть. Это изматывает, хочется найти более простые пути. Тут-то и произошёл очередной скачек, когда я узнал про .ssh/config - файл конфигурации для OpenSSH в котором ты можешь описать довольно сложные соединения, указать bastion как прокси и всё это свернуть под один HostName. В итоге, открытие ssh соединение до web server&amp;rsquo;a превращается в одну команду &lt;code&gt;ssh web_server_alias&lt;/code&gt;. Особенно круто, что ты можешь, например, копировать файлы с помощью &lt;code&gt;scp&lt;/code&gt; на удалённый сервер всё так же просто, более того автодополнение в терминале поможет тебе найти правильную папку на удаленном сервере, при том, что ты явным образом никакого ssh не открывал. Конечно, раньше мне иногда приходилось пользоваться ssh, но сам факт того, что это можно сделать на столько просто - открыл для меня следующий уровень владения этим инструментом и производными от него.&lt;/p&gt;

&lt;p&gt;Другой пример, это логирование, когда приложения попадают к пользователю очень часто что-то идет не так. Например, background worker, поток, который запускается с частотой раз в 10 секунд начинает забрасывать лог тоннами эксепшенов из одного специализированного модуля, благодаря чему размер лог файла очень быстро стремится в бесконечность при этом забивая этим шумомом ни в чем неповинный общий лог файл (сейчас я говорю об обычном монолите). Первое, что приходит на ум, нужно срочно бежать и фиксить. Здесь главное остановиться на пару секунд и подумать: &amp;ldquo;А могу ли я замедлить разгорающийся пожар?&amp;rdquo;. Вовсе остановить запускающийся процесс - нельзя, а вот замедлить, например, до частоты запуска раз в минуту - можно. Таким образом, пожар превращается в нечто меньшее, лог файл растет в шесть раз медленнее, значит, что достигнуть того огромного размера в который он превратился за один день он сможет только за неделю, не плохо, теперь можно собраться с мыслями и спокойно делать фикс.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Подобные идеи, ассоциируются у меня с книгой Д. Трампа &amp;ldquo;Искусство заключать сделки&amp;rdquo;. Автор рассказывает о том, что когда он строил свою Trump Tower в Нью-Йорке ему никак не удавалось выкупить территорию, достаточную по регламенту для построения небоскреба, хозяева этой территории отказывались её продавать. Тогда автор нашёл обходной путь, он арендовал землю на 99 лет. Мораль - если что-то нужно прямо сейчас, но это недостижимо, ищите дополнительные обходные пути для быстрого временного решения.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Если в обычной жизни вам не часто нужно настраивать лог файл, то здесь появляется острая потребность в этом разобраться. Например, вы хотите отслеживать запросы во внешнее API, они не доходят до этого API или некоторые из них невалидные, их происходит много и смешивать такие логи с общим потоком - не правильно. Мы всегда можем выделить специальный файл для определенного API, настроить для него логгер и аппендер (в терминах logback), настроить процесс ежедневного архивирования таких файлов и вуаля, оно работает. Вся интересная вам информация в одном месте, без лишнего шума. Таким образом, если вы имели минимальное представление как этого достичь, но не знали деталей, то кривая роста делает своё дело.&lt;/p&gt;

&lt;h2 id=&#34;разгребая-угли&#34;&gt;Разгребая угли&lt;/h2&gt;

&lt;p&gt;В какой-то момент пожары заканчиваются, они либо становятся маленькими и локальными, либо оказываются полностью потушенными, что тоже имеет место. Такие ситуации помогают нам приобрести навыки необходимые для выживания, вырасти и почувствовать настоящий вкус профессии программиста. Где-то я прочитал, что музыка способствует поиску множества решений одной проблемы, стимулирует разнообразие вариантов, это может действительно помочь в трудных ситуациях. Пожары закаляют и показывают вам на что вы способны, я не призываю вас их разжигать, но если уже разгорелось, то это отличная возможность для роста.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>